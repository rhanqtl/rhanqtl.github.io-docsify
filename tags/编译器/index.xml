<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rhanqtl – 编译器</title>
    <link>/tags/%E7%BC%96%E8%AF%91%E5%99%A8/</link>
    <description>Recent content in 编译器 on rhanqtl</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Mar 2023 10:25:27 +0800</lastBuildDate>
    
	  <atom:link href="/tags/%E7%BC%96%E8%AF%91%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Posts: 构造 SSA 形式</title>
      <link>/posts/compilers/ssa-construction/</link>
      <pubDate>Mon, 13 Mar 2023 10:25:27 +0800</pubDate>
      
      <guid>/posts/compilers/ssa-construction/</guid>
      <description>
        
        
        &lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;转换到 SSA 形式大体上分为两个步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;插入 phi 函数，确保对于任意的变量 &lt;code&gt;v&lt;/code&gt;，&lt;code&gt;USES(v)&lt;/code&gt; 中的每一个点有且仅有 &lt;code&gt;v&lt;/code&gt; 的一个 reaching definition。这也称为“live-range splitting”；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重命名 &lt;code&gt;v&lt;/code&gt; 的所有定义，给每个定义赋予唯一的名字（换言之，重命名 &lt;code&gt;v&lt;/code&gt; 的所有 live-range）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_dominance_frontier&#34;&gt;Dominance Frontier&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;用 &lt;code&gt;DF(n)&lt;/code&gt; 表示 &lt;code&gt;n&lt;/code&gt; 的 dominance frontier，其中元素 &lt;code&gt;x&lt;/code&gt; 为 &lt;code&gt;n&lt;/code&gt; dominate &lt;code&gt;x&lt;/code&gt; 的某个前驱顶点，但是不 strictly dominate &lt;code&gt;x&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fig:df-ex-1&#34; class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/df-1.png&#34; alt=&#34;df 1&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 1. Dominance Frontier 例子（1）&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 16.6666%;&#34;/&gt;
&lt;col style=&#34;width: 16.6666%;&#34;/&gt;
&lt;col style=&#34;width: 16.6666%;&#34;/&gt;
&lt;col style=&#34;width: 16.6666%;&#34;/&gt;
&lt;col style=&#34;width: 16.6666%;&#34;/&gt;
&lt;col style=&#34;width: 16.667%;&#34;/&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;n&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;DOM&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;DF&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;n&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;DOM&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;DF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;r&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;r&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;r, A, C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;D, E&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;r, A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;r, A, D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;A, E&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;B&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;r, A, B&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;E&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;r, A, E&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;插入 φ 节点的算法如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;algo:insert-phi-functions&#34; class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/algo-insert-phi-functions.png&#34; alt=&#34;algo insert phi functions&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 2. 算法：插入 φ 节点（摘自 SSA Book）&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这是典型的 BFS 算法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;有几个注意点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于 φ 节点本身是变量的定义，因此可能存在一种情况，即插入 φ 节点后又需要递归地处理被修改节点的 DF；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此处使用 &lt;code&gt;F&lt;/code&gt; 来避免在同一个 BB 中插入同一个变量的多个 φ 节点。这是因为同一变量不同 BB 的 DF 可能重合，而所有的情况最终都合并在同一个 φ 节点中处理，因此只要某一次处理某个 BB 的 DF 时插入了 φ 节点，后续就不需要再插入了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Iterated Dominance Frontier&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;为了数学上的方便，先驱们给&lt;a href=&#34;#algo:insert-phi-functions&#34;&gt;算法：插入 φ 节点（摘自 SSA Book）&lt;/a&gt; 计算过程中涉及到的所有 BB 进行了单独的定义，称为“iterated dominance frontier”，具体定义如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DF&lt;sub&gt;1&lt;/sub&gt;(S) = DF(S)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DF&lt;sub&gt;i+1&lt;/sub&gt;(S) = DF(UNION(S, DF&lt;sub&gt;i&lt;/sub&gt;(S)))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;最后达到的不动点用 &lt;code&gt;DF&lt;sup&gt;+&lt;/sup&gt;(S)&lt;/code&gt; 表示，该集合即为某个变量的“iterated dominance frontier”。实际上就是 DF(S) 的传递闭包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;例如 &lt;a href=&#34;#fig:df-ex-1&#34;&gt;Dominance Frontier 例子（1）&lt;/a&gt; 中，&lt;code&gt;DF&lt;sup&gt;+&lt;/sup&gt;({B, C, D}) = {A, D, E}&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这样，上述算法就可以定义为在 &lt;code&gt;DF&lt;sup&gt;+&lt;/sup&gt;(S)&lt;/code&gt; 的起始处插入 φ 节点。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_dominator_tree&#34;&gt;Dominator Tree&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里其实还遗留一个问题：如何计算 DF。当然你可以根据定义来做，不过如果能够设计更巧妙的数据结构，我们就能得到更简单的算法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Show me your flowchart and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won’t usually need your flowchart; it’ll be obvious.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Fred P. Brooks&lt;br/&gt;
&lt;cite&gt;The Mythical Man Month (1975)&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这个更巧妙的数据结构就是“dominator tree”。先来直观的感受下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/dominator-tree-cfg.png&#34; alt=&#34;dominator tree cfg&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 3. 示例 CFG&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;其 dominator tree 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/dominator-tree-dgraph.png&#34; alt=&#34;dominator tree dgraph&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;不过为了更好地支持 DF 的计算，我们需要在 dominator tree 的基础上加入一种称为 J-edge 的边，对于一条 J-edge a → b，a 不能够 strictly dominate b。扩展后的如下所示（用虚线表示）：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/dominator-tree-djgraph.png&#34; alt=&#34;dominator tree djgraph&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里注意，对于一条 J-edge a → b，有如下事实：a 的任意祖先 x 都 strictly dominate a，同时由于 a 是 b 的前驱，那么对于所有不能够 strictly dominate b 的 x，b 必然在 DF(x) 中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;然后，我们就可以定义算法了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/algo-calc-df.png&#34; alt=&#34;algo calc df&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 4. 算法：计算 DF（摘自 SSA Book）&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_join_set&#34;&gt;Join Set&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;对于给定的顶点集合 &lt;code&gt;S&lt;/code&gt;，&lt;code&gt;JOIN-SET(S)&lt;/code&gt; 是 S 中所有 join node 的集合。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;所谓“join node”，是指能够从 S 中两个或多个不同的顶点经过不相交的路径到达的顶点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;实际上还有另一种更加直观地表示。我们先来进一步解读一下 DF 的定义。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_变量重命名&#34;&gt;变量重命名&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;重命名阶段基本上就是对 CFG 进行 DFS（当然，DFS 的路径就是 dominator tree）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/algo-rename-vars.png&#34; alt=&#34;algo rename vars&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 5. 算法：重命名变量（摘自 &lt;a href=&#34;https://www.cs.utexas.edu/users/mckinley/380C/lecs/07.pdf:&#34;&gt;CS380C Lec. 7 的 slide&lt;/a&gt;）&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
SSA Book 的变量重命名算法没有常见 DFS 的递归结构，理解起来不够直观。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stacks 是一个从变量 V 到栈的映射，栈顶是 V 最近定义的序号，Stacks[*] 初始为空；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GenName 逻辑如下：&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Counters 是一个从变量 V 到分配给该变量下一个定义的序号的映射，Counters[*] 初始值为 0；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock text-center&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/algo-rename-vars-gen-name.png&#34; alt=&#34;algo rename vars gen name&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里需要注意循环的顺序：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;φ-node 是在 BB 的起始部分插入的，当前 BB 可能用得到 φ 的结果，因此需要把处理 φ 节点的循环放在最前面&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这里其实存在一个小小的问题：如果先将 φ-node 的 LHS 重命名，后续在替换 RHS 的时候，是否会自己引用自己？答案是不会，φ-node 的 RHS 中的各个变量在处理 DT 中的父节点已经进行了替换，见最外层的第 3 个循环。这又引出一个问题：entry 没有父节点，怎么保证 φ-node 的 RHS 被处理呢？答案是，不需要处理，因为 entry 不可能有 φ-node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理完某 BB 的 φ-node 后，接下来就是处理普通的指令（这里称为“Statement”），这里嵌套的循环也同样需要注意顺序：先替换，再重命名，否则就有可能自己引用自己；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;递归结束后，还需要将本 BB 引入的新名字退栈。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_案例研究go_编译器的_ssa_构造&#34;&gt;案例研究：Go 编译器的 SSA 构造&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Posts: 实现一个 LLVM Pass</title>
      <link>/posts/compilers/opt/llvm-passes/writing-an-llvm-pass/</link>
      <pubDate>Tue, 07 Mar 2023 09:43:32 +0800</pubDate>
      
      <guid>/posts/compilers/opt/llvm-passes/writing-an-llvm-pass/</guid>
      <description>
        
        
        
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:setup&#34;&gt;环境搭建&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;首先，你需要编译 LLVM&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
LLVM 提供了所谓“out of source”的方式实现 pass，但是最终还是要将 pass 的源码加入到 LLVM 的源码树中。详见 &lt;a href=&#34;https://llvm.org/docs/CMake.html#developing-llvm-passes-out-of-source&#34;&gt;Developing LLVM passes out of source&lt;/a&gt;。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;cmake &lt;span style=&#34;color: #000080&#34;&gt;-S&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-B&lt;/span&gt; build &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;-G&lt;/span&gt; Ninja          &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;Debug &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;-DCMAKE_EXPORT_COMPILE_COMMANDS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;1 &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;-DLLVM_PARALLEL_COMPILE_JOBS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;8 &lt;span style=&#34;color: #d14&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #000080&#34;&gt;-DLLVM_PARALLEL_LINK_JOBS&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;1

&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;cmake &lt;span style=&#34;color: #000080&#34;&gt;--build&lt;/span&gt; build &lt;span style=&#34;color: #000080&#34;&gt;--target&lt;/span&gt; all&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
你也可以去掉 &lt;code&gt;-G Ninja&lt;/code&gt; 这一行，但是据说 ninja 的构建速度比 GNU Make 快，尤其是增量构建。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:code&#34;&gt;实现 Pass&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;参考官方文档 &lt;a href=&#34;https://llvm.org/docs/WritingAnLLVMPass.html&#34;&gt;Writing an LLVM Pass&lt;/a&gt;，你可以直接复用 &lt;code&gt;lib/Transforms/Hello&lt;/code&gt; 的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;我们的目标是为每个函数增加一条指令，打印一个 &lt;code&gt;int32&lt;/code&gt; 值，只需要修改 &lt;code&gt;runOnFunction&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// file: Hello.cpp&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Hello&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;FunctionPass&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// ...&lt;/span&gt;

  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;FunctionCallee&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;log_fn&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doInitialization&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Module&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getContext&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;log_fn&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getOrInsertFunction&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;on_entry&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getVoidTy&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getInt32Ty&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 返回 true 表示 Module 被修改了&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;/* CS6120 的教程里在 runOnFunction 中修改了 Module，这实际上是不被允许的，
  见 https://llvm.org/docs/WritingAnLLVMPass.html#the-functionpass-class */&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;runOnFunction&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Function&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;HelloCounter&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 确定插入位置&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;entry_blk&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;front&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;IRBuilder&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;entry_blk&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;front&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 插入 call 指令&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getContext&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ConstantInt&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getInt32Ty&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt;
                                      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;uint64_t&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;HelloCounter&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))};&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CreateCall&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;log_fn&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// F.viewCFG();&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 返回 true 表示修改了 Function&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;然后，我们来实现 &lt;code&gt;on_entry&lt;/code&gt; 函数&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// file: rtlib.c&lt;/span&gt;

&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;
#include&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;
&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;on_entry&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int32_t&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;value = %d&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;接下来，编译 &lt;code&gt;rtlib.c&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;cc &lt;span style=&#34;color: #000080&#34;&gt;-c&lt;/span&gt; rtlib.c&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;编译并优化 &lt;code&gt;main.c&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;clang &lt;span style=&#34;color: #000080&#34;&gt;-emit-llvm&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-c&lt;/span&gt; main.c &lt;span style=&#34;color: #000080&#34;&gt;-o&lt;/span&gt; main.bc
&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;opt &lt;span style=&#34;color: #000080&#34;&gt;-enable-new-pm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;0 &lt;span style=&#34;color: #000080&#34;&gt;-load&lt;/span&gt; build/lib/libLLVMHello.so &lt;span style=&#34;color: #000080&#34;&gt;-hello&lt;/span&gt; &amp;lt; main.bc &lt;span style=&#34;color: #000080&#34;&gt;-o&lt;/span&gt; main.bc
&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;llc main.bc &lt;span style=&#34;color: #000080&#34;&gt;-o&lt;/span&gt; main.s
&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;gcc main.s rtlib.o
&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;./a.out&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;输出为：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;value = 3
value = 2
value = 1
I&amp;#39;m now in g.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
LLVM 从 TODO 版本开始使用新的 Pass Manager，而我们的 pass 使用旧的 &lt;code&gt;PassManager&lt;/code&gt; 实现，所以需要加上 &lt;code&gt;-enable-new-pm=0&lt;/code&gt; 参数。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;也可以使用 &lt;code&gt;lli&lt;/code&gt; 来避免编译到本地代码，不过这样需要将 &lt;code&gt;rtlib.c&lt;/code&gt; 编译为动态库：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color: #008080&#34;&gt;$ &lt;/span&gt;cc &lt;span style=&#34;color: #000080&#34;&gt;-shared&lt;/span&gt; &lt;span style=&#34;color: #000080&#34;&gt;-fPIC&lt;/span&gt; rtlib.c &lt;span style=&#34;color: #000080&#34;&gt;-o&lt;/span&gt; rtlib.so&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;不需要再进行上面 &lt;code&gt;llc&lt;/code&gt; &lt;code&gt;gcc&lt;/code&gt; 等一系列，而是运行：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock bash&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;$ lli -load=./rtlib.so main.bc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:code-newpm&#34;&gt;实现 Pass — 使用新 PM&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:trouble-shooting&#34;&gt;可能的问题&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_undefined_symbol_enableabibreakingchecks&#34;&gt;undefined symbol: EnableABIBreakingChecks&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;plaintext&#34;&gt;error: unable to load plugin &amp;#39;build/lib/LLVMHello.so&amp;#39;: &amp;#39;build/lib/LLVMHello.so: undefined symbol: _ZN4llvm23EnableABIBreakingChecksE&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这是 LLVM 检查 ABI 兼容性的机制，见 &lt;a href=&#34;https://llvm.org/docs/ProgrammersManual.html#abi-breaking-checks:&#34;&gt;ABI Breaking Checks&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;解决方法为在项目配置阶段，确保 &lt;code&gt;LLVM_ENABLE_ASSERTIONS&lt;/code&gt; 和 &lt;code&gt;LLVM_ABI_BREAKING_CHECKS&lt;/code&gt; 两个变量的值符合如下情况之一：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前者为 &lt;code&gt;ON&lt;/code&gt;，后者为 &lt;code&gt;WITH_ASSERTS&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后者为 &lt;code&gt;FORCE_ON&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;EnableABIBreakingChecks&lt;/code&gt; 这个符号定义在 &lt;code&gt;lib/Support/ABIBreak.cpp&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#if LLVM_ENABLE_ABI_BREAKING_CHECKS
&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;EnableABIBreakingChecks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DisableABIBreakingChecks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;默认情况下（此时 &lt;a href=&#34;https://llvm.org/docs/CMake.html#llvm-related-variables:&#34;&gt;&lt;code&gt;LLVM_ABI_BREAKING_CHECKS&lt;/code&gt;&lt;/a&gt; 为 &lt;code&gt;WITH_ASSERTS&lt;/code&gt;，而 &lt;code&gt;LLVM_ENABLE_ASSERTIONS&lt;/code&gt; 为 &lt;code&gt;ON&lt;/code&gt;）是将宏 &lt;code&gt;LLVM_ENABLE_ABI_BREAKING_CHECKS&lt;/code&gt; 定义为 &lt;code&gt;1&lt;/code&gt;，因此会定义 &lt;code&gt;EnableABIBreakingChecks&lt;/code&gt;，定义了该宏的库也会引用 &lt;code&gt;EnableABIBreakingChecks&lt;/code&gt;，这样就实现了 ABI 检查的功能。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_参考&#34;&gt;参考&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://llvm.org/docs/WritingAnLLVMPass.html&#34; class=&#34;bare&#34;&gt;https://llvm.org/docs/WritingAnLLVMPass.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cs.cornell.edu/~asampson/blog/llvm.html&#34; class=&#34;bare&#34;&gt;https://www.cs.cornell.edu/~asampson/blog/llvm.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Posts: 理解 mem2reg</title>
      <link>/posts/compilers/opt/llvm-passes/mem2reg/</link>
      <pubDate>Tue, 07 Mar 2023 08:03:18 +0800</pubDate>
      
      <guid>/posts/compilers/opt/llvm-passes/mem2reg/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:background&#34;&gt;背景&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;为了应对栈变量，LLVM 引入了 &lt;a href=&#34;https://llvm.org/docs/LangRef.html#alloca-instruction:&#34;&gt;alloca&lt;/a&gt; 指令，以 C 语言为例，前端可以简单地将每个局部变量映射到一个 alloca 指令。然而，有些 alloca 指令其实是不必要的，不过让前端来负责简化它们会增加很多难度，因此 LLVM 引入了一个称为“&lt;a href=&#34;https://llvm.org/docs/Passes.html#mem2reg-promote-memory-to-register&#34;&gt;mem2reg&lt;/a&gt;”的 pass，用于自动地将 alloca 变量提升为寄存器变量。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;本文旨在以 mem2reg 为切入点深入学习 LLVM。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:experiment&#34;&gt;实验&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;为了看看 mem2reg 的效果，我们可以来尝试一些例子&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;编译命令为 &lt;code&gt;clang -S -emit-llvm -Xclang -disable-O0-optnone -fno-discard-value-names &lt;em&gt;/path/to/src&lt;/em&gt;&lt;/code&gt;，其中，&lt;code&gt;-disable-O0-optnone&lt;/code&gt; 是为了禁止 clang 在优化级别为 &lt;code&gt;-O0&lt;/code&gt; 时给函数加上 &lt;code&gt;optnone&lt;/code&gt; 属性，这个属性会让 PassManager 跳过可选的优化（包括 mem2reg），参见 &lt;a href=&#34;#bib:opt-no-effect&#34;&gt;[1]&lt;/a&gt;；&lt;code&gt;-fno-discard-value-names&lt;/code&gt; 是为了保留变量的名字，否则 LLVM IR 中所有的变量都会变成匿名的&lt;a href=&#34;#bib:llvm-langref&#34;&gt;[4]&lt;/a&gt;，不便于阅读。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;优化命令为 &lt;code&gt;opt -passes=mem2reg -S &lt;em&gt;/path/to/ll-file&lt;/em&gt; [ &amp;gt; &lt;em&gt;/path/to/opt-result&lt;/em&gt; ]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_仅包含一条语句&#34;&gt;仅包含一条语句&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;一种情况是只有参数，没有局部变量。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;x = %d&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;生成的 LLVM IR 和优化后的对比如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;                                   &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;                                                       &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%x.addr&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;                           &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;                      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%0&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;                     &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%call&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...)&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@.str&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;|&lt;/span&gt;    &lt;span style=&#34;color: #008080&#34;&gt;%call&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...)&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@.str&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;                                                     &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;                                                            &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;本来要 store/load 一次 &lt;code&gt;%x&lt;/code&gt; 用匿名中间结果作为 printf 实参，mem2reg 替换成了 &lt;code&gt;%x&lt;/code&gt;。可以想见多个参数应该也是相同的处理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;对比：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;                  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;                                &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;         &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%0&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;   &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%inc&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;nsw&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;|&lt;/span&gt;   &lt;span style=&#34;color: #008080&#34;&gt;%inc&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;nsw&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%inc&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;                             &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;                                    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_分支&#34;&gt;分支&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;对比：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@bar&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;                &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@bar&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;                                           &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%x.addr&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;               &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%y.addr&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;               &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;          &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;          &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%0&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;         &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%cmp&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;icmp&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;sgt&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;                  &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;|&lt;/span&gt;    &lt;span style=&#34;color: #008080&#34;&gt;%cmp&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;icmp&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;sgt&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i1&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%cmp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.then&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.else&lt;/span&gt;       &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i1&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%cmp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.then&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.else&lt;/span&gt;

&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;if.then:&lt;/span&gt;                                         &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;if.then:&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;         &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%add&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;nsw&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;                    &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;|&lt;/span&gt;    &lt;span style=&#34;color: #008080&#34;&gt;%add&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;nsw&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%add&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.end&lt;/span&gt;                                 &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.end&lt;/span&gt;

&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;if.else:&lt;/span&gt;                                         &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;if.else:&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%2&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;         &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%add1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;nsw&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;                   &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;|&lt;/span&gt;    &lt;span style=&#34;color: #008080&#34;&gt;%add&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;nsw&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%add1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.end&lt;/span&gt;                                 &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;br&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.end&lt;/span&gt;

&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;if.end:&lt;/span&gt;                                          &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;if.end:&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%3&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y.addr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;         &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;|&lt;/span&gt;    &lt;span style=&#34;color: #008080&#34;&gt;%y.addr.0&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;phi&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%add&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.then&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%add1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%if.else&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%3&lt;/span&gt;                                  &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;|&lt;/span&gt;    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%y.addr.0&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;                                                &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
实际上在这种情况中 LLVM 会改用 &lt;a href=&#34;https://llvm.org/docs/LangRef.html#select-instruction:&#34;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; 指令。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_循环&#34;&gt;循环&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;对比&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code&gt;define i32 @foo(i32 %n) {                         define i32 @foo(i32 %n) {
entry:                                            entry:
  %n.addr = alloca i32, align 4                &amp;lt;
  %sum = alloca i32, align 4                   &amp;lt;
  %i = alloca i32, align 4                     &amp;lt;
  store i32 %n, ptr %n.addr, align 4           &amp;lt;
  store i32 0, ptr %sum, align 4               &amp;lt;
  store i32 0, ptr %i, align 4                 &amp;lt;
  br label %for.cond                                br label %for.cond

for.cond:                                         for.cond:
  %0 = load i32, ptr %i, align 4               &amp;lt;
  %1 = load i32, ptr %n.addr, align 4          &amp;lt;
                                               &amp;gt;    %sum.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ]
                                               &amp;gt;    %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %0, %1                   |    %cmp = icmp slt i32 %i.0, %n
  br i1 %cmp, label %for.body, label %for.end       br i1 %cmp, label %for.body, label %for.end

for.body:                                         for.body:
  %2 = load i32, ptr %i, align 4               &amp;lt;
  %3 = load i32, ptr %sum, align 4             &amp;lt;
  %add = add nsw i32 %3, %2                    |    %add = add nsw i32 %sum.0, %i.0
  store i32 %add, ptr %sum, align 4            &amp;lt;
  br label %for.inc                                 br label %for.inc

for.inc:                                          for.inc:
  %4 = load i32, ptr %i, align 4               &amp;lt;
  %inc = add nsw i32 %4, 1                     |    %inc = add nsw i32 %i.0, 1
  store i32 %inc, ptr %i, align 4              &amp;lt;
  br label %for.cond, !llvm.loop !6                 br label %for.cond, !llvm.loop !6

for.end:                                          for.end:
  %5 = load i32, ptr %sum, align 4             &amp;lt;
  ret i32 %5                                   |    ret i32 %sum.0
}                                                 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里跟前面分支都有一个很有趣的点：除了 &lt;code&gt;ret&lt;/code&gt;，其他的 terminator 指令都没有发生变化，也就是说，mem2reg 不会改变 CFG。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_指针&#34;&gt;指针&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;生成代码如下:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%a&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%p&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;alloca&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;8&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;%p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;align&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;8&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里有一个需要注意的点：尽管两条 alloca 最后都能去掉，但是 &lt;code&gt;%a&lt;/code&gt; 必须在 &lt;code&gt;%p&lt;/code&gt; 之后才能被干掉。这是因为最初 &lt;code&gt;%a&lt;/code&gt; 的地址作为了第二条 store 的 value operand，如果去掉，对应的 store 就无法表示；而在 &lt;code&gt;%p&lt;/code&gt; 被去掉以后，&lt;code&gt;%a&lt;/code&gt; 只剩下一个 use，就可以被去掉了。因此 mem2reg 还需要以不动点的方式运行：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 1. find AllocaInst&amp;#39;s can be promoted&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 2. if not found, exit the loop&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 3. promote those AllocaInst&amp;#39;s&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:writing-mem2reg&#34;&gt;自己实现一个 mem2reg&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;不难发现，提升 &lt;code&gt;alloca&lt;/code&gt; 变量是围绕着 &lt;code&gt;store&lt;/code&gt; 和 &lt;code&gt;load&lt;/code&gt; 两类指令进行的，具体地：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;store&lt;/code&gt; 是 def，&lt;code&gt;load&lt;/code&gt; 是 use；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理过程跟构建 SSA 很相似，涉及到 φ-node 的插入和重命名（重命名）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成替换后，需要删除无用的 &lt;code&gt;store&lt;/code&gt;、&lt;code&gt;load&lt;/code&gt; 和 &lt;code&gt;alloca&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
如果不了解 SSA 形式的构建过程，可以参考 &lt;a href=&#34;/posts/compilers/ssa-construction/&#34;&gt;这篇文章&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;因此，大致流程可以是这样的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;插入 φ-node&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;计算 IDF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建 φ-node&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重命名&lt;/p&gt;
&lt;div class=&#34;olist loweralpha&#34;&gt;
&lt;ol class=&#34;loweralpha&#34; type=&#34;a&#34;&gt;
&lt;li&gt;
&lt;p&gt;对于 BB 中每一条指令&lt;/p&gt;
&lt;div class=&#34;olist lowerroman&#34;&gt;
&lt;ol class=&#34;lowerroman&#34; type=&#34;i&#34;&gt;
&lt;li&gt;
&lt;p&gt;如果是 store 和 phi，记录变量 AI 的新值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是 load，将所有 use 替换为 AI 当前值，并删除这条 load&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为每个后继中新增的 phi 添加入边&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 dom. tree 中的每个子节点递归重命名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除所有无用的 store&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_框架&#34;&gt;框架&lt;/h3&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
你需要先了解如何在 LLVM 中实现一个 pass，参见 &lt;a href=&#34;#bib:writing-an-llvm-pass-new-pm&#34;&gt;[2]&lt;/a&gt;。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;在 &lt;code&gt;include/llvm/Transforms/Utils&lt;/code&gt; 中创建文件 &lt;code&gt;MyMemToReg.h&lt;/code&gt;，加入如下的内容：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#ifndef LLVM_TRANSFORMS_UTILS_MYMEMTOREG_H
#define LLVM_TRANSFORMS_UTILS_MYMEMTOREG_H
&lt;/span&gt;
&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;&amp;#34;llvm/IR/PassManager.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;
&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;llvm&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Function&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MyMemToRegPass&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PassInfoMixin&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyMemToRegPass&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PreservedAnalyses&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Function&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;FunctionAnalysisManager&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AM&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// end namespace llvm&lt;/span&gt;

&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#endif  // LLVM_TRANSFORMS_UTILS_MYMEMTOREG_H&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
递归这里其实还有另一种做法，可以先处理 φ-node，后面在 LLVM 的 mem2reg 中会见到。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;先来搭框架（基本上就是前面列出的流程的直接映射）：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// file: MyMemToReg.cpp&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PreservedAnalyses&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyMemToRegPass&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Function&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
                                      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;FunctionAnalysisManager&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AM&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 我们在两个阶段都需要用的 dom. tree&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AM&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getResult&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DominatorTreeAnalysis&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 用于返回时判断哪些分析结果可以被保留&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Changed&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SmallVector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 收集这一轮能够提升的 alloca&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getEntryBlock&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;canPromote&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;push_back&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;empty&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doPromote&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Changed&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Changed&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PreservedAnalyses&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PreservedAnalyses&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PA&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 如前文所述，mem2reg 不会改变 CFG&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PA&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;preserveSet&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CFGAnalyses&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PA&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;接下来是 &lt;code&gt;canPromote&lt;/code&gt;，用于判断哪些 alloca 能够提升：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;canPromote&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;U&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StoreInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 1. 如果 alloca 是作为被存入的值，不能提升&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 2. 这里涉及到“透明指针”，LLVM 目前在使用指针时不关心指针指向的类型，例如&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//      %0 = alloca i32, align 4&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//      %1 = load i16, ptr %0, align 4&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//    参见 https://llvm.org/docs/OpaquePointers.html&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getValueOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;||&lt;/span&gt;
          &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getValueOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getAllocatedType&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LoadInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 同上&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getAllocatedType&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 如果被任何其它类型的指令使用，不提升&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;为了保持简单，我们这里忽略了 load 和 store 的 volatile 问题。实际上，如果有 volatile，那么是不能提升的，因为 LLVM IR 将 volatile 访问定义为有“可见的副作用”（visible side effects）&lt;a href=&#34;#bib:llvm-langref-volatile&#34;&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;接下来是 &lt;code&gt;doPromote&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;doPromote&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SmallVectorImpl&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
                      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DominatorTree&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 记录 phi-node 到 alloca 的对应关系&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DenseMap&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SmallPtrSet&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BasicBlock&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DefiningBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getDefiningBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DefiningBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ForwardIDFCalculator&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;IDF&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;IDF&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;setDefiningBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DefiningBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SmallVector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BasicBlock&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHIBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;IDF&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;calculate&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHIBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;insertPHINodes&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHIBlocks&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DenseMap&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;E&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 可能存在没有被任何 store 支配的 load 和 phi-node 用 ⊥ 兜底&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]].&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;push&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;UndefValue&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getAllocatedType&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()));&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doRename&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getRootNode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 在最后删除无用的 alloca&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Allocas&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;eraseFromParent&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;getDefiningBlocks&lt;/code&gt; 和 &lt;code&gt;insertPHINodes&lt;/code&gt; 很简单，这里不再贴代码解释。重点是 &lt;code&gt;doRename&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;doRename&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DomTreeNode&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DN&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
         &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DenseMap&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
         &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DenseMap&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 替换 load 指令&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DN&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getBlock&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 注意这里的 make_early_inc_range，由于 LI-&amp;gt;eraseFromParent 会导致迭代器失效，&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 如果不用这个函数包装一下，运行时会崩溃&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;make_early_inc_range&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Inst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StoreInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Inst&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getPointerOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 确保这是一条 alloca 并且可以提升&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;push&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getValueOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Inst&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 我们插入 phi-node 时，都是在 BB 的最开始连续插入的，因此遇到不在&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// AllocasByPHINode 的 phi-node 说明已经处理完了本轮插入的 phi-node&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;push&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LoadInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Inst&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getPointerOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;replaceAllUsesWith&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;eraseFromParent&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;下一步是递归：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;doRename&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(...)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 注意这里是修改所有 succ 的 phi-node&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;successors&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// If the instruction is not a phi-node, exit the loop.&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Finding a phi-node not in AllocasByPHINode means we are done with&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// those phi-nodes we inserted.&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;addIncoming&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 注意这里仅仅是对 dom. tree 中的子节点进行递归，因为没有被当前 BB&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// dominate 的 succ 一定会有对应的 phi-node，且仅需要处理这些 phi-node&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DN&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;children&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;doRename&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;最后，删除无用的 store，并还原 value stack：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;doRename&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(...)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 同样需要使用 make_early_inc_range，这个循环跟第一个很类似&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;make_early_inc_range&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Inst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;InstRef&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StoreInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Inst&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocaInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getPointerOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;pop&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;eraseFromParent&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Inst&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AllocasByPHINode&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StacksByAlloca&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;find&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;second&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;pop&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;别忘了把 pass 注册到 PassRegistry.def 和 PassBuilder 中。编译之后就可以用 opt 调用了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;plaintext&#34;&gt;$ opt -passes=my-mem-to-reg -S ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;完整代码参见 &lt;a href=&#34;code/MyMemToReg.h&#34;&gt;MyMemToReg.h&lt;/a&gt; 和 &lt;a href=&#34;code/MyMemToReg.cpp&#34;&gt;MyMemToReg.cpp&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;sec:reading-llvm-mem2reg&#34;&gt;LLVM 的实现&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;LLVM 的实现的框架跟我们自己的类似，多了一些优化和细节上的考虑。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock warning&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-warning&#34; title=&#34;Warning&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
这里比较凌乱，不过尽量保证了大框架的规整。如果你在读代码过程中有一些不理解的问题，可以来看看这里有没有相关内容。更欢迎解答我的疑惑！
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_判断能否提升&#34;&gt;判断能否提升&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;如 &lt;code&gt;isAllocaPromotable&lt;/code&gt; 的注释所说的：“Only allow direct and non-volatile loads and stores”。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;mem2reg 只允许被提升变量的 uses 包含某些特定的指令，而且这些 uses 也必须满足一定的限制。目前（LLVM17）这些指令包括：LoadInst、StoreInst、IntrinsicInst、BitCastInst、GetElementPtrInst 和 AddrSpaceCastInst。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;LoadInst 的分支中如下的测试比较令人疑惑（StoreInst 也有类似的）:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LoadInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LoadInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;U&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//                      vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;isVolatile&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getAllocatedType&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #0086B3&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这个在文档中没有说明，不过通过翻 Git 历史（&lt;a href=&#34;https://github.com/llvm/llvm-project/commit/074561a4a22f610d756109170285d8626c4cc3bc&#34;&gt;这个&lt;/a&gt;和&lt;a href=&#34;https://reviews.llvm.org/D109259&#34;&gt;这个&lt;/a&gt;）看到了原因：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Alloca promotion can only deal with cases where the load/store types match the alloca type (it explicitly does not support bitcasted load/stores).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With &lt;a href=&#34;https://llvm.org/docs/OpaquePointers.html&#34;&gt;opaque pointers&lt;/a&gt; this is no longer enforced through the pointer type, so add an explicit check.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;至于 volatile，参见 &lt;a href=&#34;#bib:llvm-langref-volatile&#34;&gt;[6]&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A volatile load or store may have additional target-specific semantics. Any volatile operation can have side effects, and any volatile operation can read and/or modify state which is not accessible via a regular load or store in this module. Volatile operations may use addresses which do not point to memory (like MMIO registers). This means the compiler may not use a volatile operation to prove a non-volatile access to that address has defined behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— LLVM Programmer&amp;#39;s Manual
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;title&#34;&gt;LLVM 的 Intrinsic Function&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;LLVM 的 intrinsic function 是由 LLVM 编译器特殊处理的函数。这些函数通常低级操作，要么在源语言中无法表达，要么用普通的函数调用实现成本太高。Intrinsic function 提供了更多的优化空间，例如，LLVM 可以将它们内联，特化或者用 target-specific 指令代替（摘录自 ChatGPT 的回答）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这些函数具有众所周知的名称和语义，并且需要遵循某些限制。总的来说，这些内在函数代表了 LLVM 语言的扩展机制，在添加到语言中时不需要更改 LLVM 中的所有变换&lt;a href=&#34;#bib:llvm-langref&#34;&gt;[4]&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;llvm.pseudoprobe&lt;/code&gt; 用于加入探针，可以进行 PGO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;llvm.assume&lt;/code&gt; 用于为优化器和代码生成器提供无法通过代码本身提供的信息，例如在某个程序点假设 &lt;code&gt;x &amp;gt; 0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;TODO: 除了 load/store 之外，其他四个指令的特殊限制暂时还没想明白&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_promotemem2regrun&#34;&gt;PromoteMem2Reg::run&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;TODO: droppable user
TODO: removeIntrinsicUsers 为什么要过滤掉 void 类型的 Inst（目前应该只有 probe 是 void 的，但是 probe 本身是可以 droppable）
TODO: 如果将 probe 和 assume 移除了，如何保留原来的功能？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这个函数的流程如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;将所有 trivial 的 alloca 及相关的 store 和 load 移除（包括没有 use 的、只有一个 store 的和所有的 use 在同一个 BB 的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于非 trivial 的 alloca，进行通用的插入 φ-node 和重命名的操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除无用的 alloca&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理 φ-node 相关的边界情况，包括简化 φ-node 和完善不可达 BB 的 φ-node&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;removeIntrinsicUsers 结束之后，我们只需要关心 load 和 store 即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_边界情况&#34;&gt;边界情况&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;如注释所说的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Loop over all of the PHI nodes and see if there are any that we can get rid of because they merge all of the same incoming values.  This can happen due to undef values coming into the PHI nodes.  This process is iterative, because eliminating one PHI node can cause others to be removed.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;TODO: non-deterministic def-use chain 会有什么影响吗？
TODO: unreachable bb 为什么还需要处理？不会被去掉吗？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;关于最后补足 φ-node 的入边，通过入边的数量来区分哪些 φ-node 是本轮 mem2reg 插入的（换句话说，何时停止），那么如果恰好有在 mem2reg 之前已经存在的 phi 的 incoming 跟 mem2reg 添加的数量一样，岂不是会出问题？就目前能想到的情况而言，还好——要么要求前面的 pass 保证做了同样的处理，要么本轮给补充完整，反正是 undef，问题不大。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_rewritesinglestorealloca&#34;&gt;rewriteSingleStoreAlloca&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;该函数中有一个判断：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StoringGlobalVal&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;isa&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Instruction&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;OnlyStore&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;/* ... */&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;/* ... */&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StoringGlobalVal&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;/* ... */&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里的目的是将所有被 &lt;code&gt;store&lt;/code&gt; dominate 的 &lt;code&gt;load&lt;/code&gt; 替换成 &lt;code&gt;store&lt;/code&gt; 的参数，如果存在没有被 dominate 的走通用流程（这一点通常应该对应于未初始化的局部变量，不过至少在 C11 中，这种行为不是 UB，仅仅会导致读取出来的值是“indetermine”的，因此走通用流程是合理的）。函数的参数（类型为 &lt;code&gt;llvm::Argument&lt;/code&gt;）和全局变量（类型为 &lt;code&gt;llvm::GlobalValue&lt;/code&gt;）均属于“non-instructions”（也许这个变量的名字改成 &lt;code&gt;StoringNonInstValue&lt;/code&gt; 更合适），其中函数参数确保在进入函数体之前就存在了，而且本身作为寄存器变量保证了不会被修改，因此“always dominated”，可以直接替换。不过全局变量其实涉及到一个很小的点。我们来看如下的代码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;baz&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;%p %p&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;baz&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这段代码在我的机器上（amd64，clang，-O0/-O1/-O2/-O3/-Ofast）会输出两个相同的值，即 &lt;code&gt;baz&lt;/code&gt; 的地址。优化后的结果是这样的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;;                                                  vvvvvvvv      vvvvvvvv&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%call&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...)&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@.str&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@bar.baz&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@bar.baz&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;如果将最后两行注释掉，又会输出两个不同于 &lt;code&gt;baz&lt;/code&gt; 的地址的值&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;llvm&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;define&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;entry:&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;;                                                  vvvvv      vvvvv&lt;/span&gt;
  &lt;span style=&#34;color: #008080&#34;&gt;%call&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...)&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@printf&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #008080&#34;&gt;@.str&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;undef&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a61717;background-color: #e3d2d2&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;undef&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;直接原因是，当 store 的内容是全局变量时 &lt;code&gt;StoringGlobalVal&lt;/code&gt; 为 true，执行流跳过了 &lt;code&gt;if&lt;/code&gt; 分支，直接将出现在&lt;strong&gt;后面&lt;/strong&gt;的 &lt;code&gt;store&lt;/code&gt; 的值替换到出现在&lt;strong&gt;前面&lt;/strong&gt;的 &lt;code&gt;load&lt;/code&gt;。不过，使用未初始化的局部变量是 UB&lt;a href=&#34;#bib:c11-annex-j.2&#34;&gt;[5]&lt;/a&gt;，所以其实影响不大（我在 LLVM 社区提了一个&lt;a href=&#34;https://discourse.llvm.org/t/question-about-mem2regs-handling-of-global-variables/69279&#34;&gt;问题&lt;/a&gt;，忽略我的英语）。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_promotesingleblockalloca&#34;&gt;promoteSingleBlockAlloca&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;有一个比较特殊的点——当发现一个 load 之前没有任何 store 时，直觉上将 load 的 uses 替换为 undef 就好（因为当前情况是所有的 load 和 store 都在同一个 BB 中），但是 LLVM 进行了分情况考虑：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果没有任何 store，将 load 替换为 undef&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则，返回 false 用通用逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
这里 &lt;code&gt;llvm::lower_bound&lt;/code&gt; 返回的是紧跟着 load 的 store 的索引，因此如果 &lt;code&gt;it == begin()&lt;/code&gt;，因为这 load 之前没有 store
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;关键在于，这里考虑的&lt;strong&gt;仅仅&lt;/strong&gt;是 load 和 store，但是还有 alloca！mem2reg 只考虑 entry 中的 alloca，也就是说 alloca 一定 dominate 所有的 store 和 load。考虑如下的 BB：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;images/only-in-one-bb.png&#34; alt=&#34;only in one bb&#34;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里 &lt;code&gt;%gotcha&lt;/code&gt; 虽然一开始是 undef，但是后面会被修改。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;title&#34;&gt;等价 C 代码&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;如下代码会产生上述行为：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;gotcha&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;gotcha&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;gotcha&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_promotemem2regcomputeliveinblocks&#34;&gt;PromoteMem2Reg::ComputeLiveInBlocks&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;进行 liveness 分析&lt;a href=&#34;#bib:liveness-analysis&#34;&gt;[7]&lt;/a&gt;，这主要是为了消除无用的 φ-node，也就是说，最终 mem2reg 的结果是 pruned 形式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;分析的流程也比较直观：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;从 uses 开始，先将没有 live-in 的 block 剔除，这里的逻辑有一点绕&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BasicBlock&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;iterator&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StoreInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;StoreInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;SI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LiveInBlockWorklist&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LiveInBlockWorklist&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;back&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LiveInBlockWorklist&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;pop_back&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LoadInst&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LoadInst&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;LI&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getOperand&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;AI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;进入这个循环时能够确定的是，&lt;code&gt;BB&lt;/code&gt; 包含 &lt;code&gt;AI&lt;/code&gt; 的 def 和 use，为了确定是否 live-in，我们需要确定 def 和 use 出现的先后顺序——如果先出现的是 def，那么没有 live-in，需要将 BB 从 work list 中删除；如果先出现的是 use，那么 live-in，保留。为了实现这个逻辑，这里使用了两个并列的、可能跳出循环的 &lt;code&gt;if&lt;/code&gt;，找到的是第一个使用 &lt;code&gt;AI&lt;/code&gt; 的 load 或者 store。如果找到的是 store，那么说明没有 live-in，否则，说明 live-in。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后就是经典的 backward data-flow analysis&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;结束 liveness 分析，就可以开始进行插入 φ-node 和 rename 的工作了。插入 φ-node 比较简单，因为已经有了 IDF。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;为什么要对 PHIBlocks 进行排序？目前能想到的唯一理由就是让 &lt;code&gt;Version&lt;/code&gt; 增加的顺序跟 BB 的顺序一致。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_renamepass&#34;&gt;RenamePass&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;手动将递归转换为了迭代，见 commit 记录：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Change the rename pass to be &amp;#34;tail recursive&amp;#34;, only adding N-1 successors
to the worklist, and handling the last one with a &amp;#39;tail call&amp;#39;. This speeds
up PR1432 from 2.0578s to 2.0012s (2.8%)&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;attribution&#34;&gt;
— Chris Lattner
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;NextIteration:&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 当前 BB 是否有 phi-node? 注意, 我们假设 BB 中所有的 phi-node 一定出现&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 在开头的部分&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;APN&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 由于我们的 phi-node 是在 BB 的最前面插入的, 所以如果&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// PhiToAllocaMap.count(APN) 不为 0, 那么说明我们在当前 BB 插入了&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// phi-node.&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;//&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 有了这两个保证, 我们可以确认当前 BB 有需要 rename 的 phi-node.&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PhiToAllocaMap&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;APN&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;/* ... */&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 第一个被处理的 BB 是 entry, 但是由于 entry 没有 phi-node,&lt;/span&gt;
      &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 所以控制流根本不会走到这里, 因此不会崩溃.&lt;/span&gt;
      &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NumEdge&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;llvm&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;successors&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Pred&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;BB&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;接下来就是给 φ-node 添加入边，流程很直观：首先获取 φ-node 的迭代器（也就是 Instruction 的迭代器，调用 &lt;code&gt;BB.begin&lt;/code&gt; 即可），然后给遇到的每一个 φ-node 调用 &lt;code&gt;addIncoming&lt;/code&gt; 添加入边，同时还要记得由于 φ-node 本身就是变量的 def，要用它更新变量当前的值。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;不过，这里有一个需要注意的问题：我们并没有记录 mem2reg 在当前 BB 添加了多少 φ-node，因此需要其他的方式确定何时停止。LLVM 解决的方式基于一个前提，即，新添加的（没有调用过 &lt;code&gt;addIncoming&lt;/code&gt; 的）φ-node 的 &lt;code&gt;getNumOperands&lt;/code&gt; 的结果都是一样的，一旦遇见一个不一样的，说明就不是 mem2reg 添加的，就可以终止。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PNI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;APN&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;dyn_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PHINode&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PNI&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;APN&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 这里的判断基于下一个待处理的 phi-node&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;APN&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;getNumOperands&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;NewPHINumOperands&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;TODO: 正常情况下 pred 到 BB 为什么会有多条边
TODO: 疑惑，直觉上来讲，新增的 φ-node 的 &lt;code&gt;getNumOperands&lt;/code&gt; 应该就是 0，那么直接用 0 就好了，为啥还要进行一次调用？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;处理完 φ-node 后，就是替换 load 和 store 的部分，这里很直观，跟我们自己实现的差不多，就不再赘述了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;最后是“递归”的部分。首先将 BB 和 Pred 都更新为第一个 succ，然后将其他的后继 BB 都添加到 work list 中（这一步要跟外面的 while 循环配合才能完成使命），最后，跳回 &lt;code&gt;RenamePass&lt;/code&gt; 的开始。本质上完成了一个先序 DFS 遍历。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sidebarblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;div class=&#34;title&#34;&gt;递归转迭代&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;我们只讨论直接递归（关于直接递归和间接递归，参见 &lt;a href=&#34;https://www.baeldung.com/cs/recursion-direct-vs-indirect&#34;&gt;Recursion: Direct vs Indirect&lt;/a&gt;）。首先明确一点，递归的轨迹是一棵树（自然，可以退化成线性序列），这样我们讨论的问题就变成了如何将递归的树遍历算法转换为迭代形式。通常，遍历一棵树有三种形式：先序遍历、后序遍历和中序遍历，其中中序遍历是针对二叉树的特殊情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;先来看先序遍历。LLVM 已经为我们做出了示范：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将参数打包，保存在一个数据结构中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无限循环，通过 break 或者 return 结束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在循环的末尾设置好下一次“递归”的“参数”，将其他的部分保存起来&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;至于中序和后序，我也暂时没弄明白，尬笑……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_总结&#34;&gt;总结&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;本文首先介绍了引入 mem2reg 的&lt;a href=&#34;#sec:background&#34;&gt;背景&lt;/a&gt;，然后展示了若干简单的&lt;a href=&#34;#sec:experiment&#34;&gt;实验&lt;/a&gt;加深对 mem2reg 功能的理解，接下来讲解了&lt;a href=&#34;#sec:writing-mem2reg&#34;&gt;如何实现自己的 mem2reg&lt;/a&gt;，最后，本文详细地讲解了 &lt;a href=&#34;#sec:reading-llvm-mem2reg&#34;&gt;LLVM 的实现&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;总体而言，mem2reg 是 LLVM 中一个比较简单的 pass，不过通过学习这个 pass，我们了解了不少思想、相关的实现技术和需要注意的细节。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_参考&#34;&gt;参考&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;bib:opt-no-effect&#34;&gt;&lt;/a&gt;[1] &lt;a href=&#34;https://stackoverflow.com/questions/46513801/llvm-opt-mem2reg-has-no-effect&#34;&gt;LLVM opt mem2reg has no effect&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;bib:writing-an-llvm-pass-new-pm&#34;&gt;&lt;/a&gt;[2] &lt;a href=&#34;https://llvm.org/docs/WritingAnLLVMNewPMPass.html&#34;&gt;Writing an LLVM Pass (with the new pass manager)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;bib:llvm-progman&#34;&gt;&lt;/a&gt;[3] &lt;a href=&#34;https://llvm.org/docs/ProgrammersManual.html:&#34;&gt;LLVM Programmer’s Manual&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;bib:llvm-langref&#34;&gt;&lt;/a&gt;[4] &lt;a href=&#34;https://llvm.org/docs/LangRef.html&#34;&gt;LLVM Language Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;bib:c11-annex-j.2&#34;&gt;&lt;/a&gt;[5] &lt;a href=&#34;http://port70.net/~nsz/c/c11/n1570.html#J.2&#34;&gt;J.2 Undefined behavior&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;bib:llvm-langref-volatile&#34;&gt;&lt;/a&gt;[6] &lt;a href=&#34;https://llvm.org/docs/LangRef.html#volatile-memory-accesses&#34;&gt;Volatile Memory Accesses&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;bib:liveness-analysis&#34;&gt;&lt;/a&gt;[7] &lt;a href=&#34;https://en.wikipedia.org/wiki/Live-variable_analysis&#34;&gt;Live-variable analysis - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Posts: 在 Bison 中如何构造列表</title>
      <link>/posts/compilers/tips/construct-lists-in-bison/</link>
      <pubDate>Sat, 11 Feb 2023 21:02:57 +0800</pubDate>
      
      <guid>/posts/compilers/tips/construct-lists-in-bison/</guid>
      <description>
        
        
        &lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;生成 AST 时免不了处理列表（例如，函数调用的参数）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Expr&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CallExpr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Expr {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Expr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; fn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Expr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; args;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是手写 parser，可以这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// assume that &amp;#39;(&amp;#39; is consumed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;until current token is &amp;#39;)&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    expr ← parse an expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    if lookahead token is not &amp;#39;)&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        consume a &amp;#39;,&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    end
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是 Bison 并没有直接提供对列表表示的支持（例如，&lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;+&lt;/code&gt; 符号&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;），只能使用递归（有点像命令式语言跟函数式语言，不是吗？），本文介绍如何实现。&lt;/p&gt;
&lt;h1 id=&#34;依靠递归创建列表&#34;&gt;依靠递归创建列表&lt;/h1&gt;
&lt;p&gt;Bison 支持两种递归：左递归和右递归，两种方式都可以创建列表，但是顺序不同、需要的内存也不同。&lt;/p&gt;
&lt;p&gt;我们以列表字面量为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个列表字面量以一个 &lt;code&gt;[&lt;/code&gt; 开始、中间是以 &lt;code&gt;,&lt;/code&gt; 分隔的任意数量的表达式，最后以 &lt;code&gt;]&lt;/code&gt; 结尾；&lt;/li&gt;
&lt;li&gt;表达式可以是浮点数，也可以是列表字面量&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;左递归&#34;&gt;左递归&lt;/h2&gt;
&lt;p&gt;文法（省略语义动作）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;line: &amp;#34;\n&amp;#34;
    | list &amp;#34;\n&amp;#34; ;

list: NUMBER
    | list &amp;#34;,&amp;#34; NUMBER
    ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;处理过程大概是这样的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;序号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;栈&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;token 序列&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;动作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;42 &amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list &amp;lsquo;,&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3.14 &amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list &amp;lsquo;,&amp;rsquo; 3.14&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list &amp;lsquo;,&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.718  &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list &amp;lsquo;,&amp;rsquo; 2.718&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start line&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个序列是&lt;em&gt;从前向后&lt;/em&gt; 构造；&lt;/li&gt;
&lt;li&gt;基本上类似于手写的、基于迭代的方式；&lt;/li&gt;
&lt;li&gt;所需内存比较稳定。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;右递归&#34;&gt;右递归&lt;/h2&gt;
&lt;p&gt;文法（省略动作）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;line: &amp;#34;\n&amp;#34;
    | list &amp;#34;\n&amp;#34;
    ;

list: NUMBER
    | NUMBER &amp;#34;,&amp;#34; list
    ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;处理过程大概是这样的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;序号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;栈&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;token 序列&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;动作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;42 &amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42 &amp;lsquo;,&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3.14 &amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42 &amp;lsquo;,&amp;rsquo; 3.14&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;,&amp;rsquo; 2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42 &amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.718 &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42 &amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo; 2.718&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42 &amp;lsquo;,&amp;rsquo; 3.14 &amp;lsquo;,&amp;rsquo; list&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start 42 &amp;lsquo;,&amp;rsquo; list&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start list &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;$start line&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;reduce&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个序列是&lt;em&gt;从后向前&lt;/em&gt; 构造；&lt;/li&gt;
&lt;li&gt;所需内存与列表长度成正比。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;如果是构造双向链表，两种方式都可以，不过应该更偏向于左递归，因为内存量少；如果构造列表（Java 的 ArrayList、Python 的 &lt;code&gt;list&lt;/code&gt;），最好还是使用左递归；如果构造单向链表，可能右递归会容易处理一些（当然，也可以使用左递归 + 头插，最后翻转一下）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这有点像函数式语言中的 &lt;code&gt;foldl&lt;/code&gt; 和 &lt;code&gt;foldr&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bison 的手册建议总是使用左递归。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;
&lt;p&gt;本文介绍了如何在 Bison 中创建列表。&lt;/p&gt;
&lt;p&gt;完整代码见 &lt;a href=&#34;./code/leftrec.yy&#34;&gt;leftrec.yy&lt;/a&gt;、&lt;a href=&#34;./code/rightrec.yy&#34;&gt;rightrec.yy&lt;/a&gt;、&lt;a href=&#34;./code/list.hpp&#34;&gt;list.hpp&lt;/a&gt; 和 &lt;a href=&#34;./code/Makefile&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bison/manual/html_node/Recursion.html&#34;&gt;3.3.3 Recursive Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;ANTLR 中支持，所以可以如&lt;a href=&#34;https://stackoverflow.com/a/759055&#34;&gt;这个答案&lt;/a&gt;中这样实现&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Posts: Bison 小技巧：tie-in</title>
      <link>/posts/compilers/tips/lexical-tie-ins/</link>
      <pubDate>Fri, 10 Feb 2023 15:02:57 +0800</pubDate>
      
      <guid>/posts/compilers/tips/lexical-tie-ins/</guid>
      <description>
        
        
        &lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;实现 C++ 编译器时，有一个比较恼人的点是嵌套模板的使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 c++11 以前，必须在两个 &lt;code&gt;&amp;lt;&lt;/code&gt; 之间插入空白符&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 会默认被解析成右移运算符，这对于强迫症来说是难以接受的。C++11 给出的办法是，在存在尚未匹配的 &lt;code&gt;&amp;lt;&lt;/code&gt; 的情况下，如果遇到 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;，则将其拆分为 &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;tie-in&#34;&gt;Tie-in&lt;/h1&gt;
&lt;p&gt;前面提到的情况实际上就是 parser 中的上下文依赖，Bison 手册提供了相应的解决方案，称为“tie-in”。换言之，就是 parser 对外提供一些访问当前状态的接口，scanner 会根据不同的状态在相同的 lexeme 提供不同的 token 类别：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;/* example.y */
type:
    IDENT       {
                  printf(&amp;#34;%s&amp;#34;, $&amp;lt;sval&amp;gt;1);
                  if (unmatched_open_bracket == 0) {
                    putchar(&amp;#39;\n&amp;#39;);
                  }
                }
  | IDENT       { printf(&amp;#34;%s [ &amp;#34;, $&amp;lt;sval&amp;gt;1); }
      LT        { unmatched_open_bracket++; }
      type GT   {
                  unmatched_open_bracket--;
                  printf(&amp;#34; ]&amp;#34;);
                  if (unmatched_open_bracket == 0) {
                    putchar(&amp;#39;\n&amp;#39;);
                  }
                }
  ;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;这里使用了所谓的“midrule action”&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;词法则是这样的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-flex&#34; data-lang=&#34;flex&#34;&gt;/* example.l */
&amp;#34;&amp;lt;&amp;#34;     { return LT; }
&amp;#34;&amp;gt;&amp;#34;     { return GT; }
&amp;#34;&amp;gt;&amp;gt;&amp;#34;    {
          /* 如果当前没有未匹配的 &amp;lt;，认为是右移运算符 */
          if (unmatched_open_bracket == 0) {
            return RSHIFT;
          }
          /* 放回一个 &amp;gt;，下次用 */
          unput(&amp;#39;&amp;gt;&amp;#39;);
          return GT;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;错误处理&#34;&gt;错误处理&lt;/h1&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;
&lt;p&gt;本文介绍了一种在 parser 中处理上下文依赖的技术，称为“tie-in”，并使用 Bison 和 Flex 给出了示例实现。&lt;/p&gt;
&lt;p&gt;完整的代码见 &lt;a href=&#34;./code/tie_in.y&#34;&gt;tie_in.y&lt;/a&gt;、&lt;a href=&#34;./code/tie_in.l&#34;&gt;tie_in.l&lt;/a&gt; 和 &lt;a href=&#34;./code/Makefile&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://cpp.sh/?source=%23include+%3Ciostream%3E%0A%0Astruct+S+%7B%0A++++void+f()+%7B%0A++++++++this()%3B%0A++++%7D%0A++++%0A++++void+operator()()+const+%7B%0A++++++++std%3A%3Acout+%3C%3C+%22aha%22+%3C%3C+std%3A%3Aendl%3B%0A++++%7D%0A%7D%3B%0A%0Aint+main()+%7B%0A++++S+s%3B%0A++++s.f()%3B%0A%7D&#34;&gt;cpp.sh 上的示例&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/bison/manual/bison.html#Midrule-Actions&#34;&gt;3.4.8 Actions in Midrule&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Posts: 用 Flex 和 Bison 实现一个计算器</title>
      <link>/posts/compilers/build-your-own-programming-language/01-flex-bison-intro/</link>
      <pubDate>Sat, 04 Feb 2023 11:27:54 +0800</pubDate>
      
      <guid>/posts/compilers/build-your-own-programming-language/01-flex-bison-intro/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;本文需要你有一定的 C/C++ 基础和编译原理基础，包括：了解 C/C++ 基本的编译模型，词法分析（会写正则表达式）、语法分析（至少能够定义文法，了解 BNF 更好）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;词法规则定义&#34;&gt;词法规则定义&lt;/h1&gt;
&lt;p&gt;Flex 文件包含三个部分：一些 C 语言的声明定义、匹配 token 的规则（正则表达式）和匹配成功时的动作，以及 C 函数定义，三个部分之间用 &lt;code&gt;%%&lt;/code&gt; 分开，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ... prologue ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... Bison declarations ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... grammar ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... epilogue ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;词法规则的第一部分如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-flex&#34; data-lang=&#34;flex&#34;&gt;%{
  #include &amp;lt;stdlib.h&amp;gt;

  #include &amp;#34;calc.tab.h&amp;#34;

  void yyerror(const char *fmt, ...);
%}

%option noyywrap nodefault

number  [0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 &lt;code&gt;%{ ... %}&lt;/code&gt; 内的部分会被原样拷贝到生成的 &lt;code&gt;.c&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include &amp;quot;calc.tab.h&amp;quot;&lt;/code&gt; 是 Bison 生成的头文件，其中包含 token 的定义和 C 函数的声明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yyerror&lt;/code&gt; 是报告错误的函数，定义在语法规则文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%option noyywrap&lt;/code&gt; 表示不需要默认定义 &lt;code&gt;yywrap&lt;/code&gt; 函数，这个函数时早期的遗留，现在几乎不使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%option nodefault&lt;/code&gt; 表示禁用默认的 &lt;code&gt;main&lt;/code&gt; 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后的 &lt;code&gt;number ...&lt;/code&gt; 相当于给正则表达式起了个名字，后面可以通过名字引用。注意，不支持符号，这里跟常见的编程语言一致，认为负数实际上是对字面量应用取反运算符。&lt;/p&gt;
&lt;p&gt;此法规则的第二部分如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-flex&#34; data-lang=&#34;flex&#34;&gt;%%

{number}    {
              yylval = atof(yytext);
              return NUM;
            }

[-+*/^()]   { return yytext[0]; }

\n          {
              yycolumn = 1;
              return yytext[0];
            }
[ \t\r\f]   ;

.           yyerror(&amp;#34;invalid character&amp;#34;);

%%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每一条规则都包含一个模式和一组动作。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个规则的 &lt;code&gt;number&lt;/code&gt; 就是前一部分定义的正则表达式，其动作表示我们要将当前的 lexeme 转换为 &lt;code&gt;double&lt;/code&gt; 赋给保存语义值的 yylval 变量，并返回 &lt;code&gt;NUM&lt;/code&gt; 表示当前匹配到了 &lt;code&gt;NUM&lt;/code&gt; 这个 token；&lt;/li&gt;
&lt;li&gt;第二条规则匹配到的都是单字符的运算符，不需要额外的名字，表示原样返回对应的字符；&lt;/li&gt;
&lt;li&gt;第四条规则的动作部分只有一个 &lt;code&gt;;&lt;/code&gt;，表示将相关字符忽略掉，具体的，这里就是忽略除 &lt;code&gt;\n&lt;/code&gt; 之外的空白符。&lt;/li&gt;
&lt;li&gt;最后一条规则表示任何没有匹配的字符都要报错&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Flex 有一个重要的限制是不支持 Unicode，如果想要支持 Unicode 只能自己实现词法分析器然后与语法分析器对接起来（通过 &lt;code&gt;yylex&lt;/code&gt; 函数）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;语法规则定义&#34;&gt;语法规则定义&lt;/h1&gt;
&lt;p&gt;为了实现运算符的优先级和结合性，对于数学表达式，教科书上通常会给出这样的文法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;expr    → term
term    → term &amp;#39;+&amp;#39; factor | term &amp;#39;-&amp;#39; factor
factor  → factor &amp;#39;*&amp;#39; unary | factor &amp;#39;/&amp;#39; unary
unary   → primary | &amp;#39;-&amp;#39; unary
primary → NUM | &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是这种文法需要引入若干额外的名字（毕竟起名字是一件很难的事），而且关于优先级和结合性的信息是隐含的，不便于理解，因此 Bison 提供了一种简便的方式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;...

%left &amp;#39;+&amp;#39; &amp;#39;-&amp;#39;
%left &amp;#39;*&amp;#39; &amp;#39;/&amp;#39;
%nonassoc NEG
%right &amp;#39;^&amp;#39;

%%

expr : expr &amp;#39;+&amp;#39; expr
     | expr &amp;#39;-&amp;#39; expr
     | expr &amp;#39;*&amp;#39; expr
     | expr &amp;#39;/&amp;#39; expr
     | expr &amp;#39;^&amp;#39; expr
     | &amp;#39;-&amp;#39; expr %prec NEG

...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意中间的 &lt;code&gt;%left&lt;/code&gt; 这部分，&lt;code&gt;%left&lt;/code&gt; 表示其后的运算符是左结合的，而从上到下的顺序表示优先级从高到低。&lt;/p&gt;
&lt;p&gt;Bison 文件的总体结构与 Flex 文件相同，所不同的是具体的内容。&lt;/p&gt;
&lt;p&gt;语法规则定义的第一部分如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%{
  #include &amp;lt;stdio.h&amp;gt;
  #include &amp;lt;math.h&amp;gt;

  const char *PROMPT = &amp;#34;=&amp;gt; &amp;#34;;

  int yylex(void);
  void yyerror(const char *format, ...);
%}

%define api.value.type {double}

%token NUM

%left &amp;#39;+&amp;#39; &amp;#39;-&amp;#39;
%left &amp;#39;*&amp;#39; &amp;#39;/&amp;#39;
%nonassoc NEG
%right &amp;#39;^&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与 Flex 文件相同，&lt;code&gt;%{ ... %}&lt;/code&gt; 中的部分是一些 C 语言的头文件包含、常量定义和函数声明；&lt;code&gt;%define ...&lt;/code&gt; 表示将 词法分析中保存语义值的变量 &lt;code&gt;yylval&lt;/code&gt; 的类型 YYSTYPE 定义为 &lt;code&gt;double&lt;/code&gt;；&lt;code&gt;%token NUM&lt;/code&gt; 表示定义一个名为 &lt;code&gt;NUM&lt;/code&gt; 的 token 类型；最后的几行就是前面提到的优先级和结合性的定义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你可能会好奇为什么 token 类别是由语法分析器定义的。我没有看到任何关于这一点的解释，但是有一个合理的推测：Flex 和 Bison 不是一起开发的，Bison 甚至不要求词法分析器一定是 Flex 生成的；语法分析过程需要了解 token 类别，这有一种做法是让词法分析器定义或者使用单独的头文件，但是如你所见，Bison 可以对 token 定义优先级，这一点使得无论如何 &lt;code&gt;.y&lt;/code&gt; 文件中都会出现一些相关的定义，不如就直接由 Bison 定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二部分如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;%%

input : %empty
      | input line { printf(PROMPT); }
      ;

line : &amp;#39;\n&amp;#39;
     | expr &amp;#39;\n&amp;#39;  { printf(&amp;#34;%.17g\n&amp;#34;, $1); }
     ;

expr : NUM                { $$ = $1; }
     | &amp;#39;(&amp;#39; expr &amp;#39;)&amp;#39;       { $$ = $2; }
     | expr &amp;#39;+&amp;#39; expr      { $$ = $1 + $3; }
     | expr &amp;#39;-&amp;#39; expr      { $$ = $1 - $3; }
     | expr &amp;#39;*&amp;#39; expr      { $$ = $1 * $3; }
     | expr &amp;#39;/&amp;#39; expr      { $$ = $1 / $3; }
     | expr &amp;#39;^&amp;#39; expr      { $$ = pow($1, $3); }
     | &amp;#39;-&amp;#39; expr %prec NEG { $$ = -$2; }
     ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中顶层规则 &lt;code&gt;input&lt;/code&gt; 表示输入可以为空字符串（&lt;code&gt;%empty&lt;/code&gt; 是 Bison 内置的表示空字符串的符号），也可以由若干个 &lt;code&gt;line&lt;/code&gt; 组成，其动作在下一个部分解释；规则 &lt;code&gt;line&lt;/code&gt; 表示一行可以直接给出换行，也可以有一个表达式；规则 &lt;code&gt;expr&lt;/code&gt; 定义了我们支持的运算，其中 &lt;code&gt;$$&lt;/code&gt; 表示产生式左侧所对应的语义值，&lt;!-- raw HTML omitted --&gt;$&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 表示产生式右侧第 &lt;code&gt;n&lt;/code&gt; 个终结符或非终结符的语义值。&lt;/p&gt;
&lt;p&gt;这里注意 &lt;code&gt;expr&lt;/code&gt; 的倒数第二个产生式，因为前一部分并没有定义一元 &lt;code&gt;-&lt;/code&gt; 运算符的优先级，而仅定义了 &lt;code&gt;NEG&lt;/code&gt; 这个优先级，这里需要用 &lt;code&gt;%prec NEG&lt;/code&gt; 将该产生式与对应的优先级关联起来。&lt;/p&gt;
&lt;p&gt;第三部分如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;%%

int main(int argc, char *argv) {
  printf(PROMPT);
  return yyparse();
}

void yyerror(const char *fmt, ...) {
  fprintf(stderr, &amp;#34;%s\n&amp;#34;, fmt);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 函数中首先打印提示符，然后调用 &lt;code&gt;yyparse&lt;/code&gt; 函数开始解析，由于在语法分析完成之前（即，遇到 EOF）函数 &lt;code&gt;yyparse&lt;/code&gt; 都不会返回，这里不能在 &lt;code&gt;while&lt;/code&gt; 循环体中打印提示符，而是需要在解析完成一行（即，一个表达式后）打印新的提示符（因为这时已经在 &lt;code&gt;line&lt;/code&gt; 中打印了表达式的值，所以不会干扰）；函数 &lt;code&gt;yyerror&lt;/code&gt; 就是报告错误函数的实现。&lt;/p&gt;
&lt;h1 id=&#34;改进错误恢复&#34;&gt;改进：错误恢复&lt;/h1&gt;
&lt;p&gt;现在的计算器在出现语法错误时会直接崩溃，这不是我们期望的结果，一个健壮的计算器应该能够报告错误并从中恢复，为此，我们需要修改词法和语法的定义。&lt;/p&gt;
&lt;p&gt;在词法规则定义中加入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-flex&#34; data-lang=&#34;flex&#34;&gt;%{
  /* ... */
  int yycolumn = 1;

  #define YY_USER_ACTION \
    do { \
      yylloc.first_line = yylloc.last_line = yylineno; \
      yylloc.first_column = yycolumn; \
      yylloc.last_column = yycolumn + yyleng - 1; \
      yycolumn += yyleng;   \
    } while (0);
%}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于 Flex 只能够自动维护行号（即 &lt;code&gt;yylineno&lt;/code&gt;），所以这里定义一个变量 &lt;code&gt;yycolumn&lt;/code&gt; 来手动维护列号&lt;/li&gt;
&lt;li&gt;Flex 在匹配到 token 并设置好 &lt;code&gt;yytext&lt;/code&gt; 和 &lt;code&gt;yyleng&lt;/code&gt; 后、在执行关联的语义动作之前，会展开 &lt;code&gt;YY_USER_ACTION&lt;/code&gt; 钩子，给用户一些扩展空间，这里就是我们的定义，其中 &lt;code&gt;yylloc&lt;/code&gt; 是用于表示 token 位置的结构体，其类型默认定义为&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; YYLTYPE {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; first_line;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; first_column;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; last_line;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; last_column;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} YYLTYPE;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;可以通过如下方式覆盖默认的 &lt;code&gt;YYLTYPE&lt;/code&gt; 定义：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;%{
  #include &amp;#34;location.h&amp;#34;
%}

%define api.location.type {location_t}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Flex 文件中也需要修改：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-flex&#34; data-lang=&#34;flex&#34;&gt;%{
  // 顺序不能颠倒，否则 calc.tab.h 中找不到 `location_t` 这个符号
  #include &amp;#34;location.h&amp;#34;
  #include &amp;#34;calc.tab.h&amp;#34;
%}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因见 &lt;a href=&#34;https://stackoverflow.com/questions/10386567/yylloc-undefined-in-this-scope&#34;&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在另一个名为 &lt;code&gt;location.h&lt;/code&gt; 的文件中，可以如下定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; __location {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; filename;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; first_line;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; first_column;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; last_line;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; last_column;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;location_t&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;在语法规则定义中加入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;%locations
/* ... */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;表示开启位置特性&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;line&lt;/code&gt; 加入一条产生式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;line : error \n { yyerrok; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;error&lt;/code&gt; 是 Bison 保留的关键字，用于表示错误情况，动作中的 &lt;code&gt;yyerrok&lt;/code&gt; 表示忽略错误，恢复到正常状态。&lt;/p&gt;
&lt;p&gt;将除法的产生式修改为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;expr : expr &amp;#39;/&amp;#39; expr { if ($3 != 0) {
                         $$ = $1 / $3;
                       } else {
                         $$ = INT_MIN;
                         fprintf(stderr, &amp;#34;%d:%d-%d:%d: divide by zero\n&amp;#34;,
                             @3.first_line, @3.first_column,
                             @3.last_line, @3.last_column);
                       }
                     }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们会首先判断除数是否为 0，如果不为 0，正常进行除法运算，否则报错。其中 &lt;code&gt;@3&lt;/code&gt; 是包含了产生式右侧第三个符号的位置的结构体（类型为 &lt;code&gt;YYLTYPE&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;yyerror&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yyerror&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fmt, ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;yytext;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d:%d-%d:%d: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  error: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      yylloc.first_line, yylloc.first_column,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      yylloc.last_line, yylloc.last_column, yytext, fmt);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于 &lt;code&gt;yytext&lt;/code&gt; 是词法分析器中的变量，这里需要将其声明为 &lt;code&gt;extern&lt;/code&gt;，但是并不建议直接使用，因为语法分析过程可能会 look ahead 导致 &lt;code&gt;yytext&lt;/code&gt; 并不是出错的 token。&lt;/p&gt;
&lt;p&gt;这样我们就有了一个健壮的，能够报告错误的计算器。&lt;/p&gt;
&lt;h1 id=&#34;改进读取写入文件&#34;&gt;改进：读取/写入文件&lt;/h1&gt;
&lt;p&gt;在语法规则定义中加入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;%{
  /* ... */
  #include &amp;lt;stdbool.h&amp;gt;

  const char *filename = &amp;#34;&amp;lt;interactive&amp;gt;&amp;#34;;
  bool interactive = true;
%}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改 &lt;code&gt;input&lt;/code&gt; 规则：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-bison&#34; data-lang=&#34;bison&#34;&gt;input : %empty
      | input line { if (interactive) {
                       printf(PROMPT);
                     }
                   }
      ;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改 &lt;code&gt;main&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;yyin;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;yyout;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yyin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fopen&lt;/span&gt;(filename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    interactive &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    yyout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fopen&lt;/span&gt;(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (interactive) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(PROMPT);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yyparse&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;interactive) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fclose&lt;/span&gt;(yyin);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fclose&lt;/span&gt;(yyout);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，还需要将所有的输出改为 &lt;code&gt;fprintf(yyout, ...)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不过输出到文件应该不是太重要，完全可以用 I/O 重定向实现，这里只是为了介绍 &lt;code&gt;yyout&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;
&lt;p&gt;本文首先介绍了计算器的基本词法规则定义和基本语法规则定义，详细解释了各部分的含义。然后，借助 Flex 和 Bison 提供的功能，本文改进了该计算器，使得其更加健壮且能够报告出错位置。最后，本文为计算器增加了读取并解释文件以及将结果输出到文件的功能。&lt;/p&gt;
&lt;p&gt;源码见 &lt;a href=&#34;./src/src/calc.y&#34;&gt;calc.y&lt;/a&gt;、&lt;a href=&#34;./src/src/calc.l&#34;&gt;calc.l&lt;/a&gt;、&lt;a href=&#34;./src/include/location.h&#34;&gt;location.h&lt;/a&gt; 和 &lt;a href=&#34;./src/Makefile&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bison/manual/html_node/Location-Type.html&#34;&gt;3.5.1 Data Type of Locations - Bison Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
