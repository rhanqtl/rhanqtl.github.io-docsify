<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rhanqtl – c/c&#43;&#43;</title>
    <link>/tags/c/c&#43;&#43;/</link>
    <description>Recent content in c/c&#43;&#43; on rhanqtl</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Posts: C&#43;&#43;11 新特性笔记</title>
      <link>/posts/c&#43;&#43;-notes/xx-c&#43;&#43;11-features/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/c&#43;&#43;-notes/xx-c&#43;&#43;11-features/</guid>
      <description>
        
        
        &lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;本文参照 Bjarne 在 HOPL IV 列出的大纲整理 C++11 新特性的要点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_语言特性&#34;&gt;语言特性&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_auto_和_decltype&#34;&gt;auto 和 decltype&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;auto&lt;/code&gt; 用于根据 initializer 推断数据对象的类型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;          &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// i is an int&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;7.2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;        &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// d is a double&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// p gets the type of v&amp;#39;s iterator&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;code&gt;auto&lt;/code&gt; 在 C 中本来用于标记变量是一个“自动（automatic）变量”，C++11 复用了这个关键字。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
据 Bjarne 的说法，他在 1982/83 就实现了 &lt;code&gt;auto&lt;/code&gt; 类型推断，但是为了保持与 C 的兼容性又给移除了。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;除了减少输入的好处，&lt;code&gt;auto&lt;/code&gt; 还能够表示一些很复杂的类型，例如 lambda 表达式的类型：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cmp&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;不过 &lt;code&gt;auto&lt;/code&gt; 有一些需要注意的地方：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r1&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r2&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// x is of type int rather than int &amp;amp;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// y is of type int&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// z is of type int &amp;amp;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// w is of type const int &amp;amp;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;auto&lt;/code&gt; 一般会忽略顶层 &lt;code&gt;const&lt;/code&gt;，保留底层 &lt;code&gt;const&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cr&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// int&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// int&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// int *&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// const int *&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;如果想要保留顶层 &lt;code&gt;const&lt;/code&gt;，需要显式指定：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;       &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// int *&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// int *const&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;除此之外，C++11 还引入了尾置返回类型：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// These two are equivalent:&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// -&amp;gt;int is optional&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;decltype&lt;/code&gt; 用于在不求值的情况下获取表达式的类型，可以用来：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明返回类型&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error: x was not declared in this scope&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T2&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Instead, use&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T2&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模板元编程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递 lambda 的类型，详见后面关于 lambda 的部分&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;decltype&lt;/code&gt; 会保留顶层 &lt;code&gt;const&lt;/code&gt; 和引用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ci&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cr&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// const int, OK&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// const int &amp;amp;, OK&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;     &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// const int &amp;amp;, error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;特别需要注意的是如下的情况：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// int &amp;amp;, error&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;   &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;即，&lt;code&gt;decltypev&lt;/code&gt; 永远是引用，而 &lt;code&gt;decltype(v)&lt;/code&gt; 只有在 &lt;code&gt;v&lt;/code&gt; 本身是引用时才是引用&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_lambda_表达式&#34;&gt;lambda 表达式&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;在 C++11 之前，如果一个函数需要另一个函数作为参数，有两种选择：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从 C 继承下来的函数指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传入一个重载了 &lt;code&gt;operator()&lt;/code&gt; 的类型的对象，有时候称为“functor”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这两个选择存在同一个问题：如果一个简单函数仅会被调用一次，依然要完整地将其定义出来（函数指针还不能捕获词法作用域中的数据对象）。lambda 表达式作为匿名函数改变了这一点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;lambda 表达式的完整形式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;[] () mutable throw-spec -&amp;gt;return-type { ... }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;其中 &lt;code&gt;()&lt;/code&gt; &lt;code&gt;mutable&lt;/code&gt;、&lt;em&gt;throw-spec&lt;/em&gt; 和 &lt;em&gt;→return-type&lt;/em&gt; 都是可选的，但是任何一个出现，参数列表 &lt;code&gt;()&lt;/code&gt; 都必须出现：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; 是捕获列表，用于指定如何捕获词法作用域中的非静态数据对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;()&lt;/code&gt; 是参数列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mutable&lt;/code&gt; 是一个关键字，用于声明按值捕获的数据能否修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;throw-spec 可以是 &lt;code&gt;noexcept&lt;/code&gt; 和 &lt;code&gt;throw&lt;/code&gt;（除了 &lt;code&gt;throw()&lt;/code&gt;，其他形式在 C++11 废弃）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;return-type 用于标示返回类型，大多数情况下都能够根据返回值自动推导&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// uniform initialization&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// reverse order&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;可以在 cppinsights.io 看到 Clang 是通过 &lt;code&gt;struct&lt;/code&gt; 来实现的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;捕获有两种形式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按值捕获 by value，使用 &lt;code&gt;=&lt;/code&gt; 表示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按引用捕获 by reference，使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 表示&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;一个 &lt;code&gt;lambda&lt;/code&gt; 可以在捕获列表的最开始指定默认的捕获方式，然后额外指定以相反方式捕获的数据对象。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// capture by value&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;count_if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cbegin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cend&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// capture x by value and y by reference&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f1&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// capture y by reference and all other objects by value&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f2&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;被捕获的数据对象必须以某种方式指定了捕获方式，否则编译失败：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error: variable &amp;#39;target&amp;#39; cannot be implicitly captured in a lambda with no capture-default specified&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;count_if&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cbegin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cend&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;按值捕获的数据对象在 lambda 的函数体中是不能够修改的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error: cannot assign to a variable captured by copy in a non-mutable lambda&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// OK. Notice the empty argument list.&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;mutable&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;从 cppinsights 可以看到如果没有 &lt;code&gt;mutable&lt;/code&gt;，lambda 所对应的函数对象的 &lt;code&gt;operator()&lt;/code&gt; 带有 &lt;code&gt;const&lt;/code&gt; 标记（这里同时也需要注意，每个 lambda 对应的匿名函数对象的类型都是不同的）：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;mutable&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;特别注意，按值捕获的数据对象在 lambda 的函数体中跟原来的是不同的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;mutable&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;输出为&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;0
1
2
42&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;还需要注意的是，lambda 没有默认的构造函数和赋值操作符（很遗憾，也无法指定），但是可以有默认的拷贝构造函数和移动构造函数：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cmp&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[](&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;||&lt;/span&gt;
           &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;last_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;lhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;first_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;rhs&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;first_name&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cmp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;people&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cmp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt; &lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;colist arabic&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&#34;conum&#34; data-value=&#34;1&#34;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;这里 &lt;code&gt;cmp&lt;/code&gt; 是必须传入的，否则会调用 &lt;code&gt;set&lt;/code&gt; 的默认构造函数，它会调用 lambda 的默认构造函数：
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Compare&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;less&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Key&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Alloc&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;alloc&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// t is a field of type rb_tree&lt;/span&gt;
  &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
  &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Compare&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;comp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;comp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;最后一个需要注意的地方是捕获 &lt;code&gt;this&lt;/code&gt; 的方法：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Scaler&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Scaler&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;scale_&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error: &amp;#39;this&amp;#39; was not captured for this lambda function&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;apply_1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;for_each&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;scale_&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;endl&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// capture &amp;#34;this&amp;#34; by reference&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;apply_2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// scale_ *= 2; // error: assignment of &amp;#39;Scaler::scale_&amp;#39; in read-only object (even if with mutable)&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;for_each&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;scale_&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;endl&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// capture &amp;#34;this&amp;#34; by ref implicitly, &amp;#39;&amp;amp;&amp;#39; also works&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;apply_3&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;for_each&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;scale_&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;endl&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;private:&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;scale_&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;详见&lt;a href=&#34;https://www.nextptr.com/tutorial/ta1430524603/capture-this-in-lambda-expression-timeline-of-change&#34;&gt;这篇文章&lt;/a&gt;最开始的表格。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;如果想要按值捕获 &lt;code&gt;this&lt;/code&gt;，在 C++11 中只能这样：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;apply&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;for_each&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;copy&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_移动语义和右值引用&#34;&gt;移动语义和右值引用&lt;/h3&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_universal_reference&#34;&gt;Universal Reference&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 并不总是表示右值引用&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;详情参见 &lt;a href=&#34;https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers&#34; class=&#34;bare&#34;&gt;https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;对日常编程最有用的经验法则：如果变量或者形参被声明为 &lt;code&gt;T &amp;amp;&amp;amp;&lt;/code&gt; 类型，而 &lt;code&gt;T&lt;/code&gt; 是一个推导类型（deduced type），那么这个变量或者形参是 universal reference，注意到 &lt;code&gt;auto&lt;/code&gt; 使用跟模板相同的类型推断方法，因此 &lt;code&gt;auto &amp;amp;&amp;amp;&lt;/code&gt; 也可以是 universal reference。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;take_lref_only&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;arg&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static_assert&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;is_lvalue_reference&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;not a lvalue reference&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;take_lref_only&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static_assert&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;is_lvalue_reference&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;decltype&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;not a lvalue reference&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;编译能够通过，在 cppinsights 可以看到这样的字样：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;/* PASSED: static_assert(std::integral_constant&amp;lt;bool, 1&amp;gt;::value); */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-note&#34; title=&#34;Note&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
右值一般满足如下条件之一：（1）临时对象；（2）没有名字；（3）不能取地址。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;不过下面的 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 不是 universal reference：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;allocator&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;vector&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;push_back&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;       &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// fully specified parameter type ⇒ no type deduction;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;                          &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// &amp;amp;&amp;amp; ≡ rvalue reference&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;最后一种情况可以这样看：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;push_back&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;push_back&lt;/code&gt; 的存在依赖于 &lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt;，而类模板已经将 &lt;code&gt;T&lt;/code&gt; 的类型推导出来了，因此到 &lt;code&gt;push_back&lt;/code&gt; 的时候就不再需要推导。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;对于 universal reference，当参数为左值时，推导类型为 &lt;code&gt;T&amp;amp;&lt;/code&gt;，而参数为右值时推导类型为 &lt;code&gt;T&lt;/code&gt; 而不是 &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;，而 C++ 是不允许“” 的（因为 ref 根本不是一个实体，只是别名），因此 C++11 引入了所谓的“reference collapsing”：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右值引用的右值引用转换为右值引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他都转换为左值引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;f(x)&lt;/code&gt; 本来会导致 &lt;code&gt;T&lt;/code&gt; 被推导为 &lt;code&gt;int &amp;amp;&lt;/code&gt;，但是由于 reference collapsing 的存在，最终实例化的结果是 &lt;code&gt;f(int &amp;amp;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;如果变量本身是一个引用，引用会被忽略，例如&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r1&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r2&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// f(int &amp;amp;)&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;r2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// f(int &amp;amp;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;reference collapsing 发生的位置：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模板&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;decltype&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_完美转发&#34;&gt;完美转发&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;“完美转发”是指函数模板能够在不改变其参数的 type category 的情况下转发这些参数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;foo(int &amp;amp;)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;foo(int &amp;amp;&amp;amp;)&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;            &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// foo(int &amp;amp;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;            &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// foo(int &amp;amp;&amp;amp;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;move&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// foo(int &amp;amp;&amp;amp;)&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;            &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;            &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// foo(int &amp;amp;) ?&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;move&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// foo(int &amp;amp;) ?&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;注意看上面最后两行，我们预期的是 &lt;code&gt;foo(int &amp;amp;&amp;amp;)&lt;/code&gt;，结果却是 &lt;code&gt;foo(int &amp;amp;)&lt;/code&gt; 这是为什么呢？因为 &lt;code&gt;fwd&lt;/code&gt; 中 &lt;code&gt;i&lt;/code&gt; 变成了一个具名对象（named object）。可以这样修改：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;remove_reference&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;noexcept&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;remove_reference&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;noexcept&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;不过调用点需要修改成：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;            &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// foo(int &amp;amp;&amp;amp;)&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;fwd&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;move&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;));&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// foo(int &amp;amp;&amp;amp;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;完美转发的一般模式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;wrapper&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;forward&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)...);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;两个必备要素：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;universal reference &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;，既能够引用左值也能够引用右值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock tip&#34;&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;i class=&#34;fa icon-tip&#34; title=&#34;Tip&#34;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
&lt;code&gt;…​&lt;/code&gt; 在 &lt;code&gt;Args&lt;/code&gt; 的左边表示打包，在右边表示解包
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这里 &lt;code&gt;std::forward&lt;/code&gt; 能够保持原来 type category 是因为其参数是 universal reference&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_泛型编程&#34;&gt;泛型编程&lt;/h3&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_变参模板&#34;&gt;变参模板&lt;/h4&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;print_all&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Ts&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;print_all&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;car&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Ts&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cdr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;car&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;print_all&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cdr&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;在 cppinsights.io 可以看到详细的实例化结果。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;在继承中也可以使用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Values&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MyTuple&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MyTuple&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Head&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Tail&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MyTuple&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Head&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Tail&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyTuple&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Tail&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;能够实现一些神奇的功能：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Container&lt;/span&gt;
         &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Container&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Vec&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error: template std::vector requires 2 arguments but 1 is passed.&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Vec&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;使用 &lt;code&gt;sizeof…​(args)&lt;/code&gt; 获取参数的数量&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ix&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ed&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;PrintTupleHelper&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ostream&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tuple&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ix&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ix&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ed&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PrintTupleHelper&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ix&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ed&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ed&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;PrintTupleHelper&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ed&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ed&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ostream&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tuple&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ostream&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ostream&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tuple&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;PrintTupleHelper&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tp&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_模板别名&#34;&gt;模板别名&lt;/h4&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Vec&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyAlloc&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;模板别名不支持特化&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_统一初始化&#34;&gt;统一初始化&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;编译器看到 &lt;code&gt;{ t&lt;sub&gt;~1&lt;/sub&gt;~, t&lt;sub&gt;~2&lt;/sub&gt;~, …​, t&lt;sub&gt;~n&lt;/sub&gt;~ }&lt;/code&gt; 就会生成一个 &lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;，内部关联一个 &lt;code&gt;array&amp;lt;T, n&amp;gt;&lt;/code&gt;。调用函数（包括 ctor）时如果有接收 &lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt; 的重载，使用该重载版本，否则 &lt;code&gt;array&lt;/code&gt; 内的元素会被编译器分解逐一传递给参数。但如果参数是 &lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;，不允许反过来仅仅传入数个分开的参数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;统一初始化使得类型更加安全：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;强制使用 value initialization，即，基础类型的局部变量会被初始化为零值（0 或 &lt;code&gt;nullptr&lt;/code&gt;）&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// undefined&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不允许 narrowing initialization&lt;/p&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;3.14&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;initializer_list&lt;/code&gt; 有一个 &lt;code&gt;private&lt;/code&gt; 的构造函数，在遇到 &lt;code&gt;{…​}&lt;/code&gt; 时编译器会调用该构造函数&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;nums&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;生成的汇编如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;plaintext&#34;&gt;foo():
    push    rbp
    mov     rbp, rsp
    sub     rsp, 80
    mov     DWORD PTR [rbp-48], 1
    mov     DWORD PTR [rbp-44], 2
    mov     DWORD PTR [rbp-40], 3
    mov     DWORD PTR [rbp-36], 4
    mov     DWORD PTR [rbp-32], 5
    mov     DWORD PTR [rbp-28], 6
    lea     rcx, [rbp-48]
    mov     rax, rcx
    mov     edx, 6
    lea     rcx, [rbp-9]
    mov     QWORD PTR [rbp-8], rcx
    nop
    nop
    lea     rcx, [rbp-9]
    mov     rsi, rax
    mov     rdi, rdx
    lea     rax, [rbp-80]
    mov     rdi, rax
    ;; rdi contains the address of nums
    ;; rsi contains the pointer to the first element of the underlying array of initializer_list
    ;; rdx contains the length of the array
    ;; rcx contains the address of the allocator (seems it&amp;#39;s empty)
    call    std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::vector(std::initializer_list&amp;lt;int&amp;gt;, std::allocator&amp;lt;int&amp;gt; const&amp;amp;) [complete object constructor]
    lea     rax, [rbp-9]
    mov     rdi, rax
    call    std::__new_allocator&amp;lt;int&amp;gt;::~__new_allocator() [base object destructor]
    nop
    lea     rax, [rbp-80]
    mov     rdi, rax
    call    std::vector&amp;lt;int, std::allocator&amp;lt;int&amp;gt; &amp;gt;::~vector() [complete object destructor]
    leave
    ret&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_其他&#34;&gt;其他&lt;/h3&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_range_for&#34;&gt;range-for&lt;/h4&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;for ( decl : coll ) {
    statement
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;实际上会转换为使用 &lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;，另外如果 &lt;code&gt;coll&lt;/code&gt; 不是变量的话，会创建额外的变量接收其结果，然后在这个额外的变量上调用 &lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;for (auto _pos = coll.begin(), _end = coll.end(); _pos != _end; ++_pos) {
    decl = *_pos;
    statement
}

for (auto _pos = begin(coll), _end = end(coll); _pos != _end; ++_pos) {
    decl = *_pos;
    statement
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;注意 range-for 是不会做 &lt;code&gt;explicit&lt;/code&gt; 转换的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ss&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;ss&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_枚举类&#34;&gt;枚举类&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;从 C 继承下来的 &lt;code&gt;enum&lt;/code&gt; 会将其中的符号导入全局作用域（因此可能会跟宏定义或其他 &lt;code&gt;enum&lt;/code&gt; 冲突），而且可以设置 variant 之外的值（非类型安全），C++11 的枚举类解决了这两个问题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Token&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// EOF is defined for I/O&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;_EOF&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;KW_IF&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Token&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;tok&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// Use int as underlying type&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Variant1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Variant2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;此外从 C++11 开始还能够指定底层的存储整数类型：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Byte&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_nullptrnoexceptoverridefinal_和_constexpr&#34;&gt;nullptr、noexcept、override、final 和 constexpr&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;在 C++11 之前，想要设置空指针只能够使用从 C 继承来的 NULL，但是可能会有问题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// if NULL is defined as:&lt;/span&gt;
&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#define NULL (0)
&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error: call to &amp;#39;f&amp;#39; is ambiguous&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;nullptr&lt;/code&gt; 的类型是 &lt;code&gt;std::nullptr_t&lt;/code&gt;，可以被转换为任何指针类型，但是不能够转换为整数类型。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;noexcept&lt;/code&gt; 用于声明函数在（一定条件下）不会抛出异常，如果在满足条件的情况下抛出了异常，会调用 &lt;code&gt;std::terminate&lt;/code&gt; 结束程序。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// These are equivalent:&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;noexcept&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;noexcept&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// swap does not throw as long as x.swap(y) does not throw&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;swap&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;noexcept&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;noexcept&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;swap&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/8001823/how-to-enforce-move-semantics-when-a-vector-grows&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/8001823/how-to-enforce-move-semantics-when-a-vector-grows&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;override&lt;/code&gt; 用于检查子类的 &lt;code&gt;virtual&lt;/code&gt; 成员函数确实重写了父类的 &lt;code&gt;virtual&lt;/code&gt; 成员函数&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;final&lt;/code&gt; 的效果跟 Java 的一样：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修饰 &lt;code&gt;class&lt;/code&gt;，表示不能被继承&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修饰虚函数，表示不能被 override&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;constexpr&lt;/code&gt; 用于修饰变量或者函数（包括构造函数），用于实现编译期计算。在修饰变量时，变量必须在编译期初始化，而修饰函数时，只有在必须进行编译期计算的情况下才这样做，参见 &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/cpp/constexpr-cpp?view=msvc-170&#34; class=&#34;bare&#34;&gt;https://learn.microsoft.com/en-us/cpp/cpp/constexpr-cpp?view=msvc-170&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_explicit_新功能&#34;&gt;explicit 新功能&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;能够用于多个参数的构造函数，防止如下形式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// error&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;   &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// OK&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;详见 cppreference 的&lt;a href=&#34;https://en.cppreference.com/w/cpp/language/explicit&#34;&gt;示例&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_默认成员_initializer&#34;&gt;默认成员 initializer&lt;/h4&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;可以简化：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;应该尽可能使用这个特性，最大程度地避免直接写构造函数&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_用户定义字面量&#34;&gt;用户定义字面量&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;允许自定义后缀，不过接收的参数非常局限，只有 &lt;code&gt;long double&lt;/code&gt; 和 &lt;code&gt;const char *&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Imaginary&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Imaginary&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;然后就可以 &lt;code&gt;1.2 + 3.4i&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_字符串字面量&#34;&gt;字符串字面量&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;在写 regex 时很有用&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p1&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;w{2}&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;s*&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;d{5}(-&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;d{4})?&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// ordinary literal&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;R&amp;#34;(\w{2}\s*\d{5}(-\d{4})?)&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// raw literal&lt;/span&gt;
&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// customized delimiter:&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;R&amp;#34;::(hello)::&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;  &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// raw literal&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;括号中的内容只要不包含 &lt;code&gt;)&lt;em&gt;delimiter&lt;/em&gt;&lt;/code&gt; 即可，这个特性在可能会包含括号时很有用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;regex&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p3&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;R&amp;#34;--((()()))--&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_属性&#34;&gt;属性&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;在 C++11 之前，编译器本身也支持 &lt;code&gt;&lt;em&gt;attribute&lt;/em&gt;(())&lt;/code&gt; 声明属性，现在只不过是规范化了，而且 C++11 仅提供了两个标准属性。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;noreturn&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #990000;font-weight: bold&#34;&gt;forever&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0086B3&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_库&#34;&gt;库&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_智能指针&#34;&gt;智能指针&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;三个新的智能指针 &lt;code&gt;std::shared_ptr&lt;/code&gt; &lt;code&gt;std::unique_ptr&lt;/code&gt; 和 &lt;code&gt;std::weak_ptr&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;详见 CppCon 2020 上 Rainer Grimm 的 Smart Pointers 讲座&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_enable_shared_from_this&#34;&gt;enable_shared_from_this&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;关于为什么需要 &lt;code&gt;enable_shared_from_this&lt;/code&gt;，参见&lt;a href=&#34;https://stackoverflow.com/questions/712279/what-is-the-usefulness-of-enable-shared-from-this&#34;&gt;这个回答&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_aliasing_constructor&#34;&gt;Aliasing Constructor&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Aliasing Ctor 有两个参数，分别为 owned pointer 和 stored pointer，前者是常规的引用计数（即，构造时增加引用计数，析构时减少引用计数，&lt;code&gt;use_count&lt;/code&gt; 返回的是 owned pointer 的引用计数），后者不会管理引用计数，但是 &lt;code&gt;operator*&lt;/code&gt; 会返回其引用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;这个功能可以用于指向已经被托管（managed）的对象的成员，跟 buffer pool 的 pin 操作有一点相似：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;
&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{}&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;delete&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p1&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;make_shared&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p1&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;注意 &lt;code&gt;p1&lt;/code&gt; 和 &lt;code&gt;p2&lt;/code&gt; 类型的差别。如果 &lt;code&gt;p2&lt;/code&gt; 没有 co-own &lt;code&gt;p1&lt;/code&gt;（例如 &lt;code&gt;p2&lt;/code&gt; 仅仅是一个 &lt;code&gt;int *&lt;/code&gt;），那么 &lt;code&gt;p1&lt;/code&gt; 离开作用域时，其管理的对象就会被析构，这样最后一行就可能访问到垃圾数据（例如，我在 Compiler Explorer 上测试的结果是打印 &lt;code&gt;0&lt;/code&gt; 而非 &lt;code&gt;42&lt;/code&gt;）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;下面是来自 cppreference 的一个示例：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;rouge highlight&#34; style=&#34;background-color: #f8f8f8&#34;&gt;&lt;code data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;
#include&lt;/span&gt; &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;
&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;MyObj&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\x1b&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;[1;32mMyObj constructed&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\x1b&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\x1b&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;[1;32mMyObj destructed&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\x1b&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;[0m&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// note: public inheritance&lt;/span&gt;
&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;Container&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;enable_shared_from_this&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Container&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CreateMember&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;make_shared&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;GetAsMyObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_from_this&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #999999;font-weight: bold&#34;&gt;#define COUT(str) std::cout &amp;lt;&amp;lt; &amp;#34;\n=== &amp;#34; &amp;lt;&amp;lt; str &amp;lt;&amp;lt; &amp;#34; ===\n&amp;#34;
#define DEMO(...) std::cout &amp;lt;&amp;lt; #__VA_ARGS__ &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; __VA_ARGS__ &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
&lt;/span&gt;
&lt;span style=&#34;color: #445588;font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Creating shared container&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Container&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;make_shared&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Container&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Creating member&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;CreateMember&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Creating another shared container&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;Container&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;GetAsMyObj&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj1&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;GetAsMyObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #999988;font-style: italic&#34;&gt;// myobj1 co-owns the object pointed-to by cont, so the result of use_count is the same as cont&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Copying alias obj&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;shared_ptr&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;MyObj&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj2&lt;/span&gt; &lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Resetting cont2&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;reset&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Resetting myobj2&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj2&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;reset&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;color: #000000;font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;memberObj&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;COUT&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #d14&#34;&gt;&amp;#34;Resetting cont&amp;#34;&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;reset&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;myobj1&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;background-color: #f8f8f8&#34;&gt;DEMO&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;cont&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;use_count&lt;/span&gt;&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;background-color: #f8f8f8&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_并发编程&#34;&gt;并发编程&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;是一块很大的内容，详见 C++ Concurrency in Action 这本书&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_exception_ptr&#34;&gt;exception_ptr&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;参见 &lt;a href=&#34;https://cplusplus.com/reference/exception/exception_ptr/&#34; class=&#34;bare&#34;&gt;https://cplusplus.com/reference/exception/exception_ptr/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_tuple&#34;&gt;tuple&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;参见 &lt;a href=&#34;https://www.geeksforgeeks.org/tuples-in-c/&#34; class=&#34;bare&#34;&gt;https://www.geeksforgeeks.org/tuples-in-c/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_emplace&#34;&gt;emplace&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;code&gt;emplace&lt;/code&gt; 主要是为了避免构造临时对象，这个特性需要基于 variadic template 和完美转发，参见 link:https://www.stroustrup.com/C11FAQ.html[$$C11$$ FAQ] 的 &lt;em&gt;Container improvements&lt;/em&gt; 一节，另外可以参见 &lt;a href=&#34;https://stackoverflow.com/questions/4303513/push-back-vs-emplace-back&#34; class=&#34;bare&#34;&gt;https://stackoverflow.com/questions/4303513/push-back-vs-emplace-back&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;示例见 &lt;a href=&#34;https://cplusplus.com/reference/map/map/emplace/，需要注意&#34; class=&#34;bare&#34;&gt;https://cplusplus.com/reference/map/map/emplace/，需要注意&lt;/a&gt; &lt;code&gt;map&lt;/code&gt; 的 &lt;code&gt;insert&lt;/code&gt; 函数对于 &lt;code&gt;std::pair&lt;/code&gt; 没有右值引用的版本，参见 &lt;a href=&#34;https://cplusplus.com/reference/map/map/insert/&#34; class=&#34;bare&#34;&gt;https://cplusplus.com/reference/map/map/insert/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_参考&#34;&gt;参考&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;ms-lambda-intro&#34;&gt;&lt;/a&gt;[ms-lambda-intro] &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170&#34; class=&#34;bare&#34;&gt;https://learn.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;ms-lambda-examples&#34;&gt;&lt;/a&gt;[ms-lambda-examples] &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/cpp/examples-of-lambda-expressions?view=msvc-170&#34; class=&#34;bare&#34;&gt;https://learn.microsoft.com/en-us/cpp/cpp/examples-of-lambda-expressions?view=msvc-170&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;cppref-auto&#34;&gt;&lt;/a&gt;[auto - cppreference] &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/auto&#34; class=&#34;bare&#34;&gt;https://en.cppreference.com/w/cpp/language/auto&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;perfect-forward-modernescpp&#34;&gt;&lt;/a&gt;[perfect-forward-modernescpp] &lt;a href=&#34;https://www.modernescpp.com/index.php/perfect-forwarding&#34; class=&#34;bare&#34;&gt;https://www.modernescpp.com/index.php/perfect-forwarding&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;ref-collapse&#34;&gt;&lt;/a&gt;[C++ Reference Collapsing] &lt;a href=&#34;https://leimao.github.io/blog/CPP-Reference-Collapsing/&#34; class=&#34;bare&#34;&gt;https://leimao.github.io/blog/CPP-Reference-Collapsing/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;jjhou-11-14-new-features&#34;&gt;&lt;/a&gt;[C++11/14 新特性 by 侯捷] 版权原因，请自行搜索&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Posts: Visual Studio Code C/C&#43;&#43; 开发环境搭建</title>
      <link>/posts/tools/c&#43;&#43;-dev-setup-with-vscode/</link>
      <pubDate>Mon, 13 Feb 2023 10:50:20 +0800</pubDate>
      
      <guid>/posts/tools/c&#43;&#43;-dev-setup-with-vscode/</guid>
      <description>
        
        
        &lt;h1 id=&#34;安装-vs-code&#34;&gt;安装 VS Code&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com&#34;&gt;官网&lt;/a&gt;下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小技巧：如果官网下载比较慢，可以把下载地址中的 &lt;code&gt;az764295.vo.msecnd.net&lt;/code&gt; 更换为 &lt;code&gt;vscode.cdn.azure.cn&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;安装-clangdclangd-homepage&#34;&gt;安装 clangd&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;
&lt;p&gt;在 Arch Linux 上，&lt;code&gt;clangd&lt;/code&gt; 在 &lt;code&gt;clang&lt;/code&gt; 这个包中，用如下命令安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pacman -S clang
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;其他平台可能会使用 &lt;code&gt;clang-extra-tools&lt;/code&gt; 这个名称&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;生成-compile_commandsjson&#34;&gt;生成 compile_commands.json&lt;/h1&gt;
&lt;p&gt;以 CMake 为例（所以你需要安装 CMake），项目目录结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/project-structure.png&#34; alt=&#34;项目目录结构&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置项目，然后你会看到 &lt;code&gt;build&lt;/code&gt; 目录下有一个 &lt;code&gt;compile_commands.json&lt;/code&gt; 文件&lt;/p&gt;
&lt;h1 id=&#34;配置-clangd&#34;&gt;配置 clangd&lt;/h1&gt;
&lt;p&gt;如果你安装了 M$ 默认的 cpp-tools，首先需要在 VS Code 中将一些功能关掉（设为 &lt;code&gt;disabled&lt;/code&gt;），包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C_Cpp.autocomplete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C_Cpp.errorSquiggles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C_Cpp.intelliSenseEngine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C_Cpp.intelliSenseEngineFallback&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在配置之前，你应该会看到 &lt;code&gt;*.cpp&lt;/code&gt; 文件中的 &lt;code&gt;#include &amp;quot;stringutil.hpp&amp;quot;&lt;/code&gt; 报错，因为这个头文件在当前目录下找不到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后，打开 clangd 插件的配置，在“Clangd: Arguments”加入如下的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--background-index
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--completion-style=detailed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--all-scopes-completion
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--clang-tidy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--enable-config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--log=verbose
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--pretty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--pch-storage=memory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--header-insertion=iwyu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--ranking-model=heuristics
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--completion-parse=auto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--fallback-style=Google
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--compile-commands-dir=build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，你也可以选择在项目根目录下创建 &lt;code&gt;.vscode/settings.json&lt;/code&gt; 文件然后将如下内容加入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;clangd.arguments&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--all-scopes-completion&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--background-index&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--clang-tidy&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--compile-commands-dir=build&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--completion-parse=auto&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--completion-style=detailed&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--enable-config&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--fallback-style=Google&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--header-insertion=iwyu&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--log=verbose&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--pch-storage=memory&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--pretty&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--ranking-model=heuristics&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后使用 &lt;code&gt;Ctrl-Shift-P&lt;/code&gt; 开启命令面板，选择 &lt;code&gt;clangd: Restart language server&lt;/code&gt; 运行，应该就会看到之前的报错消失了。&lt;/p&gt;
&lt;h1 id=&#34;调试&#34;&gt;调试&lt;/h1&gt;
&lt;p&gt;安装插件 CodeLLDB（ID 为 &lt;code&gt;vadimcn.vscode-lldb&lt;/code&gt;）。在 &lt;code&gt;launch.json&lt;/code&gt; 加入如下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Use IntelliSense to learn about possible attributes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Hover to view descriptions of existing attributes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Debug&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lldb&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${workspaceFolder}/build/a.out&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-arg1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-arg2&amp;#34;&lt;/span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;preLaunchTask&amp;#34;: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ahemery.dev/2020/08/24/c-cpp-vscode/&#34;&gt;My C/C++ Dev Setup with VSCode - ANT-HEM&amp;rsquo;S TECH BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7126880493668139021&#34;&gt;为vscode配置clangd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vadimcn/codelldb/blob/v1.9.0/MANUAL.md&#34;&gt;CodeLLDB Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://clangd.llvm.org/&#34;&gt;https://clangd.llvm.org/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
